<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AllPay.Payment.Integration</name>
    </assembly>
    <members>
        <member name="T:AllPay.Payment.Integration.CompareByPaymentMethodAttribute">
            <summary>
            依據付款方式檢核比較該填寫資料欄位的類別。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.CompareByPaymentMethodAttribute.#ctor(AllPay.Payment.Integration.PaymentMethod,System.String)">
            <summary>
            依據付款方式檢核比較該填寫資料欄位的類別建構式。
            </summary>
            <param name="paymentMethod">付款方式。</param>
            <param name="confirmPropertyNames">要檢查的屬性欄位名稱(多個以/符號分隔)。</param>
        </member>
        <member name="M:AllPay.Payment.Integration.CompareByPaymentMethodAttribute.IsValid(System.Object)">
            <summary>
            是否檢核通過。
            </summary>
            <param name="value">要檢核的物件類別。</param>
            <returns>驗證成功為 True 否則為 False。</returns>
        </member>
        <member name="P:AllPay.Payment.Integration.CompareByPaymentMethodAttribute.PaymentMethod">
            <summary>
            付款方式。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.CompareByPaymentMethodAttribute.ConfirmPropertyNames">
            <summary>
            要檢查的屬性欄位名稱(多個以/符號分隔)。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.RequiredByPaymentMethodAttribute">
            <summary>
            依據付款方式檢查該欄位是否必填的類別。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.RequiredByPaymentMethodAttribute.#ctor(AllPay.Payment.Integration.PaymentMethod)">
            <summary>
            依據付款方式檢查該欄位是否必填的類別建構式。
            </summary>
            <param name="paymentMethod">付款方式。</param>
        </member>
        <member name="M:AllPay.Payment.Integration.RequiredByPaymentMethodAttribute.IsValid(System.Object)">
            <summary>
            是否檢核通過。
            </summary>
            <param name="value">要檢核的物件類別。</param>
            <returns>驗證成功為 True 否則為 False。</returns>
        </member>
        <member name="P:AllPay.Payment.Integration.RequiredByPaymentMethodAttribute.PaymentMethod">
            <summary>
            付款方式。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.PaymentMethodItem">
            <summary>
            付款方式子項目。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethodItem.None">
            <summary>
            不指定。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethodItem.WebATM_TAISHIN">
            <summary>
            台新銀行。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethodItem.WebATM_ESUN">
            <summary>
            玉山銀行。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethodItem.WebATM_HUANAN">
            <summary>
            華南銀行。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethodItem.WebATM_BOT">
            <summary>
            台灣銀行。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethodItem.WebATM_FUBON">
            <summary>
            台北富邦。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethodItem.WebATM_CHINATRUST">
            <summary>
            中國信託。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethodItem.WebATM_FIRST">
            <summary>
            第一銀行。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethodItem.WebATM_CATHAY">
            <summary>
            國泰世華。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethodItem.WebATM_MEGA">
            <summary>
            兆豐銀行。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethodItem.WebATM_YUANTA">
            <summary>
            元大銀行。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethodItem.WebATM_LAND">
            <summary>
            土地銀行。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethodItem.ATM_TAISHIN">
            <summary>
            台新銀行。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethodItem.ATM_ESUN">
            <summary>
            玉山銀行。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethodItem.ATM_HUANAN">
            <summary>
            華南銀行。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethodItem.ATM_BOT">
            <summary>
            台灣銀行。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethodItem.ATM_FUBON">
            <summary>
            台北富邦。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethodItem.ATM_CHINATRUST">
            <summary>
            中國信託。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethodItem.ATM_FIRST">
            <summary>
            第一銀行。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethodItem.CVS">
            <summary>
            超商代碼繳款。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethodItem.CVS_OK">
            <summary>
            OK超商代碼繳款。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethodItem.CVS_FAMILY">
            <summary>
            全家超商代碼繳款。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethodItem.CVS_HILIFE">
            <summary>
            萊爾富超商代碼繳款。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethodItem.CVS_IBON">
            <summary>
            7-11 ibon代碼繳款。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethodItem.Alipay">
            <summary>
            支付寶。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethodItem.Tenpay">
            <summary>
            財付通。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethodItem.TopUpUsed_AllPay">
            <summary>
            儲值/餘額消費(歐付寶)
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethodItem.BARCODE">
            <summary>
            超商條碼繳款。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethodItem.Credit">
            <summary>
            信用卡(MasterCard/JCB/VISA)。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethodItem.COD">
            <summary>
            貨到付款。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.AllInOneMetadata">
            <summary>
            全功能介接參數的類別。
            </summary>
            <summary>
            全功能介接參數的類別。
            </summary>
            <summary>
            全功能介接參數的類別。
            </summary>
            <summary>
            全功能介接參數的類別。
            </summary>
            <summary>
            全功能介接參數的類別。
            </summary>
            <summary>
            
            </summary>
            <summary>
            全功能介接參數的類別。
            </summary>
            <summary>
            全功能介接參數的類別。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.CommonMetadata">
            <summary>
            共用的介接參數的類別。
            </summary>
            <summary>
            共用的介接參數的類別。
            </summary>
            <summary>
            全功能介接參數的類別。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.CommonMetadata.#ctor">
            <summary>
            共用的介接參數的建構式。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.CommonMetadata.ServiceURL">
            <summary>
            介接服務的網址。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.CommonMetadata.ServiceMethod">
            <summary>
            介接服務的方法(預設: POST, 除 QueryTradeInfo 方法提供 SOAP 呼叫 WebService 外，其餘皆使用 POST)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.CommonMetadata.HashKey">
            <summary>
            介接的 HashKey。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.CommonMetadata.HashIV">
            <summary>
            介接的 HashIV。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.CommonMetadata.MerchantID">
            <summary>
            廠商編號。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.CommonMetadata.SendArguments">
            <summary>
            介接的基本資料傳遞成員類別。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.CommonMetadata.SendArguments.#ctor">
            <summary>
            介接的基本資料傳遞成員類別建構式。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.CommonMetadata.SendArguments.MerchantTradeNo">
            <summary>
            廠商交易編號。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.CommonMetadata.SendArguments.MerchantTradeDate">
            <summary>
            廠商交易時間。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.CommonMetadata.SendArguments.PaymentType">
            <summary>
            交易類型(程式自動設定)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.CommonMetadata.SendArguments.TotalAmount">
            <summary>
            交易金額。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.CommonMetadata.SendArguments.TradeDesc">
            <summary>
            交易描述。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.CommonMetadata.SendArguments.ItemName">
            <summary>
            商品名稱(ReadOnly)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.CommonMetadata.SendArguments.Items">
            <summary>
            商品列表(帶入購買商品的資訊，系統會自動轉為 ItemName 所需格式)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.CommonMetadata.SendArguments.ItemURL">
            <summary>
            商品銷售的網址(ReadOnly)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.CommonMetadata.SendArguments.Remark">
            <summary>
            備註欄位。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.CommonMetadata.SendArguments.ReturnURL">
            <summary>
            付款完成通知的回傳網址。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.CommonMetadata.SendArguments.ClientBackURL">
            <summary>
            用戶端返回廠商站台的網址(※頁面導回的時候，不會帶付款結果到此網址，只是將頁面導回而已)。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.CommonMetadata.QueryArguments">
            <summary>
            介接訂單查詢的資料傳遞成員類別。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.CommonMetadata.QueryArguments.#ctor">
            <summary>
            訂單查詢介接參數的建構式。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.CommonMetadata.QueryArguments.MerchantTradeNo">
            <summary>
            廠商交易編號。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.CommonMetadata.QueryArguments.TimeStamp">
            <summary>
            廠商驗證時間(自動產生)。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOneMetadata.#ctor">
            <summary>
            全功能介接參數的建構式。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOneMetadata.Send_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            特定屬性參數修改時觸發同步異動的事件。
            </summary>
            <param name="sender">來源物件。</param>
            <param name="e">提供 System.ComponentModel.INotifyPropertyChanged.PropertyChanged 事件的資料。</param>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.Send">
            <summary>
            介接產生訂單的基本資料傳遞成員。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtend">
            <summary>
            介接產生訂單的延伸資料傳遞成員。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.Query">
            <summary>
            介接訂單查詢的資料傳遞成員。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.Action">
            <summary>
            介接信用卡關帳/退刷/取消/放棄的資料傳遞成員。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.ChargeBack">
            <summary>
            介接廠商退款的資料傳遞成員。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.CaptureTrade">
            <summary>
            介接廠商撥/退款的資料傳遞成員。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.TradeFile">
            <summary>
            介接廠商下載對帳媒體檔的資料傳遞成員。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.AllInOneMetadata.QueryArguments">
            <summary>
            介接訂單查詢的資料傳遞成員類別。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOneMetadata.QueryArguments.#ctor">
            <summary>
            介接訂單查詢的資料建構式。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.QueryArguments.PlatformID">
            <summary>
            特約合作平台商代號(預設: 空)。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.AllInOneMetadata.SendArguments">
            <summary>
            介接的基本資料傳遞成員類別。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOneMetadata.SendArguments.#ctor">
            <summary>
            介接的基本資料傳遞成員類別建構式。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOneMetadata.SendArguments.Items_CollectionChanged(System.Object,AllPay.Payment.Integration.ItemCollectionEventArgs)">
            <summary>
            當產品集合被異動時，觸發連動的事件。
            </summary>
            <param name="sender">來源物件。</param>
            <param name="e">提供 System.ComponentModel.INotifyPropertyChanged.PropertyChanged 事件的資料。</param>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOneMetadata.SendArguments.RaisePropertyEvents``1(System.Linq.Expressions.Expression{System.Func{AllPay.Payment.Integration.AllInOneMetadata.SendArguments,``0}})">
            <summary>
            實作事件觸發時要處理的方法。
            </summary>
            <typeparam name="T">觸發事件的屬性型別。</typeparam>
            <param name="property">屬性參數。</param>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendArguments.ChoosePayment">
            <summary>
            付款方式。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendArguments.ChooseSubPayment">
            <summary>
            付款子項目(預設: None)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendArguments.NeedExtraPaidInfo">
            <summary>
            是否需要額外的付款資訊(預設: No)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendArguments.DeviceSource">
            <summary>
            裝置來源(預設: PC)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendArguments.IgnorePayment">
            <summary>
            不顯示的付款方式(預設: 空)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendArguments.PlatformID">
            <summary>
            特約合作平台商代號(預設: 空)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendArguments.PlatformChargeFee">
            <summary>
            特約合作平台商手續費(預設: 無)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendArguments.HoldTrade">
            <summary>
            是否要延遲撥款(※買方付款完成後，需再呼叫「廠商申請撥款／退款」API，歐付寶才會撥款給廠商，或退款給買方。倘若廠商一直不申請撥款，此筆訂單款項會一直放在歐付寶，直到廠商申請撥款，且該功能不支援「信用卡」)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendArguments.AllPayID">
            <summary>
            歐付寶的會員編號。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendArguments.AccountID">
            <summary>
            歐付寶的會員識別碼。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendArguments.InvoiceMark">
            <summary>
            電子發票開立註記(預設: 空)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendArguments.OrderResultURL">
            <summary>
            用戶端回傳付款結果的網址(※設定了此參數值，會使設定的ClientBackURL失效)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendArguments.UseRedeem">
            <summary>
            是否可以使用購物金/紅包折抵。
            </summary>
        </member>
        <member name="E:AllPay.Payment.Integration.AllInOneMetadata.SendArguments.PropertyChanged">
            <summary>
            屬性值變更時，所要觸發的事件。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.AllInOneMetadata.CaptureArguments">
            <summary>
            廠商申請撥款/退款的資料傳遞成員類別。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOneMetadata.CaptureArguments.#ctor">
            <summary>
            廠商申請撥款/退款介接參數的建構式。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOneMetadata.CaptureArguments.RaisePropertyEvents``1(System.Linq.Expressions.Expression{System.Func{AllPay.Payment.Integration.AllInOneMetadata.SendArguments,``0}})">
            <summary>
            屬性變更時，觸發變更事件的方法。
            </summary>
            <typeparam name="T">來源型別。</typeparam>
            <param name="property">屬性。</param>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.CaptureArguments.MerchantTradeNo">
            <summary>
            廠商交易編號。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.CaptureArguments.CaptureAmount">
            <summary>
            廠商申請撥款金額。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.CaptureArguments.UserRefundAmount">
            <summary>
            要退款給買方的金額。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.CaptureArguments.UserName">
            <summary>
            購買人姓名。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.CaptureArguments.UserCellPhone">
            <summary>
            買方手機號碼。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.CaptureArguments.UpdatePlatformChargeFee">
            <summary>
            是否更改特約合作平台商手續費。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.CaptureArguments.PlatformChargeFee">
            <summary>
            特約合作平台商手續費。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.CaptureArguments.Remark">
            <summary>
            備註。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.CaptureArguments.PlatformID">
            <summary>
            特約合作平台商代號(預設: 空)。
            </summary>
        </member>
        <member name="E:AllPay.Payment.Integration.AllInOneMetadata.CaptureArguments.PropertyChanged">
            <summary>
            屬性變更的事件。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments">
            <summary>
            介接的延伸資料傳遞成員類別。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.#ctor">
            <summary>
            介接的延伸資料傳遞成員類別建構式。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments._PaymentMethod">
            <summary>
            付款方式變更的快取。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.ExpireDate">
            <summary>
            允許繳費有效天數。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.StoreExpireDate">
            <summary>
            超商繳費截止時間(※CVS：以分為計算單位 BARCODE：以天為計算單位)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.Desc_1">
            <summary>
            交易描述1(會顯示在超商繳費平台螢幕上)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.Desc_2">
            <summary>
            交易描述1(會顯示在超商繳費平台螢幕上)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.Desc_3">
            <summary>
            交易描述1(會顯示在超商繳費平台螢幕上)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.Desc_4">
            <summary>
            交易描述1(會顯示在超商繳費平台螢幕上)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.ClientRedirectURL">
            <summary>
            此網址為訂單建立完成後(非付款完成後)，歐付寶會將付款相關資訊以Client端方式回傳給特約商店(※有設定此參數ClientBackURL參數將會失去作用)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.AlipayItemName">
            <summary>
            商品名稱(於 Arguments.Items 帶入購買商品的資訊後，系統會自動轉為 AlipayItemName 所需格式)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.AlipayItemCounts">
            <summary>
            商品購買數量(於 Arguments.Items 帶入購買商品的資訊後，系統會自動轉計算 AlipayItemCounts 數量)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.AlipayItemPrice">
            <summary>
            商品單價(於 Arguments.Items 帶入購買商品的資訊後，系統會自動轉為 AlipayItemPrice 所需格式)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.Email">
            <summary>
            購買人信箱(支付寶紀錄用，本公司不會紀錄)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.PhoneNo">
            <summary>
            購買人電話(支付寶紀錄用，本公司不會紀錄)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.UserName">
            <summary>
            購買人姓名(支付寶紀錄用，本公司不會紀錄)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.ExpireTime">
            <summary>
            付款截止時間(只能帶入送出交易後的72小時(三天)之內時間；不填則預設為送出交易後的72小時。)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.CreditInstallment">
            <summary>
            刷卡分期期數。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.InstallmentAmount">
            <summary>
            使用刷卡分期的付款金額。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.Redeem">
            <summary>
            信用卡是否使用紅利折抵(False: 否, True: 是)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.UnionPay">
            <summary>
            是否為銀聯卡交易(False: 否, True: 是)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.Language">
            <summary>
            語系設定(預設: 空[中文], ENG[英文])
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.PeriodAmount">
            <summary>
            定期定額每次授權金額。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.PeriodType">
            <summary>
            定期定額的週期種類。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.Frequency">
            <summary>
            定期定額的執行頻率。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.ExecTimes">
            <summary>
            定期定額的執行次數。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.RelateNumber">
            <summary>
            廠商自訂編號(當 InvoiceMark=Yes 時，則必填)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.CustomerID">
            <summary>
            客戶代號(當 InvoiceMark=Yes 和 CarruerType=Member 時，則必填)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.CustomerIdentifier">
            <summary>
            統一編號。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.CustomerName">
            <summary>
            客戶名稱(當 Print=Yes 時，則必填)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.CustomerAddr">
            <summary>
            客戶地址(當 InvoiceMark=Yes 時，則必填)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.CustomerPhone">
            <summary>
            客戶手機號碼(當 InvoiceMark=Yes 時，CustomerPhone 與 CustomerEmail 則責一選填，不可兩個都為空字串)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.CustomerEmail">
            <summary>
            客戶電子信箱(當 InvoiceMark=Yes 時，CustomerPhone 與 CustomerEmail 則責一選填，不可兩個都為空字串)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.ClearanceMark">
            <summary>
            通關方式。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.TaxType">
            <summary>
            課稅類別(當 InvoiceMark=Yes 時，則 CarruerType 不可以為 None)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.CarruerType">
            <summary>
            載具類別。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.CarruerNum">
            <summary>
            載具編號(當 InvoiceMark=Yes 和 CarruerType 為自然人憑證或手機條碼時，則必填)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.Donation">
            <summary>
            捐贈註記。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.LoveCode">
            <summary>
            愛心碼。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.Print">
            <summary>
            列印註記。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.InvoiceItemName">
            <summary>
            商品名稱(於 Arguments.Items 帶入購買商品的資訊後，系統會自動轉為 InvoiceItemName 所需格式)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.InvoiceItemCount">
            <summary>
            商品數量(於 Arguments.Items 帶入購買商品的資訊後，系統會自動轉為 InvoiceItemCount 所需格式)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.InvoiceItemWord">
            <summary>
            商品單位(於 Arguments.Items 帶入購買商品的資訊後，系統會自動轉為 InvoiceItemWord 所需格式)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.InvoiceItemPrice">
            <summary>
            商品價格(於 Arguments.Items 帶入購買商品的資訊後，系統會自動轉為 InvoiceItemPrice 所需格式)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.InvoiceItemTaxType">
            <summary>
            商品課稅別(於 Arguments.Items 帶入購買商品的資訊後，系統會自動轉為 InvoiceItemTaxType 所需格式)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.InvoiceRemark">
            <summary>
            備註。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.DelayDay">
            <summary>
            延遲天數。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.InvType">
            <summary>
            字軌類別。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.PaymentInfoURL">
            <summary>
            伺服器端回傳自動櫃員機/超商/條碼付款相關資訊的網址。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.SendExtendArguments.PeriodReturnURL">
            <summary>
            定期定額/貨到付款的執行結果相關資訊的網址。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.AllInOneMetadata.TradeFileArguments">
            <summary>
            廠商下載對帳媒體檔的資料傳遞成員類別。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOneMetadata.TradeFileArguments.#ctor">
            <summary>
            廠商下載對帳媒體檔介接參數的建構式。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOneMetadata.TradeFileArguments.RaisePropertyEvents``1(System.Linq.Expressions.Expression{System.Func{AllPay.Payment.Integration.AllInOneMetadata.SendArguments,``0}})">
            <summary>
            屬性變更時，觸發變更事件的方法。
            </summary>
            <typeparam name="T">來源型別。</typeparam>
            <param name="property">屬性。</param>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.TradeFileArguments.DateType">
            <summary>
            查詢日期類別。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.TradeFileArguments.BeginDate">
            <summary>
            查詢開始日期。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.TradeFileArguments.EndDate">
            <summary>
            查詢結束日期。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.TradeFileArguments.PaymentType">
            <summary>
            付款方式。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.TradeFileArguments.PlatformStatus">
            <summary>
            訂單類型。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.TradeFileArguments.PaymentStatus">
            <summary>
            付款狀態。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.TradeFileArguments.AllocateStatus">
            <summary>
            撥款狀態。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.TradeFileArguments.NewFormatedMedia">
            <summary>
            CSV 格式。
            </summary>
        </member>
        <member name="E:AllPay.Payment.Integration.AllInOneMetadata.TradeFileArguments.PropertyChanged">
            <summary>
            屬性變更的事件。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.AllInOneMetadata.ActionArguments">
            <summary>
            介接訂單查詢的資料傳遞成員類別。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOneMetadata.ActionArguments.#ctor">
            <summary>
            訂單查詢介接參數的建構式。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOneMetadata.ActionArguments.RaisePropertyEvents``1(System.Linq.Expressions.Expression{System.Func{AllPay.Payment.Integration.AllInOneMetadata.SendArguments,``0}})">
            <summary>
            屬性變更時，觸發變更事件的方法。
            </summary>
            <typeparam name="T">來源型別。</typeparam>
            <param name="property">屬性。</param>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.ActionArguments.MerchantTradeNo">
            <summary>
            廠商交易編號。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.ActionArguments.TradeNo">
            <summary>
            AllPay 交易編號。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.ActionArguments.Action">
            <summary>
            執行的動作。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.ActionArguments.TotalAmount">
            <summary>
            交易金額。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.ActionArguments.PlatformID">
            <summary>
            特約合作平台商代號(預設: 空)。
            </summary>
        </member>
        <member name="E:AllPay.Payment.Integration.AllInOneMetadata.ActionArguments.PropertyChanged">
            <summary>
            屬性變更的事件。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.AllInOneMetadata.ChargeBackArguments">
            <summary>
            介接廠商退款的資料傳遞成員類別。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOneMetadata.ChargeBackArguments.#ctor">
            <summary>
            廠商退款介接參數的建構式。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOneMetadata.ChargeBackArguments.RaisePropertyEvents``1(System.Linq.Expressions.Expression{System.Func{AllPay.Payment.Integration.AllInOneMetadata.SendArguments,``0}})">
            <summary>
            屬性變更時，觸發變更事件的方法。
            </summary>
            <typeparam name="T">來源型別。</typeparam>
            <param name="property">屬性。</param>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.ChargeBackArguments.MerchantTradeNo">
            <summary>
            廠商交易編號。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.ChargeBackArguments.TradeNo">
            <summary>
            AllPay 交易編號。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.ChargeBackArguments.ChargeBackTotalAmount">
            <summary>
            退款金額。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.ChargeBackArguments.Remark">
            <summary>
            執行的動作。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOneMetadata.ChargeBackArguments.PlatformID">
            <summary>
            特約合作平台商代號(預設: 空)。
            </summary>
        </member>
        <member name="E:AllPay.Payment.Integration.AllInOneMetadata.ChargeBackArguments.PropertyChanged">
            <summary>
            屬性變更的事件。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.RequiredByInvoiceMarkAttribute">
            <summary>
            依據是否開立電子發票檢查該欄位是否必填的類別。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.RequiredByInvoiceMarkAttribute.szaPhoneOrEmail">
            <summary>
            手機或郵件擇一條件檢查用的參數。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.RequiredByInvoiceMarkAttribute.szaAllowEmpty">
            <summary>
            手機或郵件擇一條件檢查用的參數。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.RequiredByInvoiceMarkAttribute.#ctor">
            <summary>
            依據是否開立電子發票檢查該欄位是否必填的類別建構式。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.RequiredByInvoiceMarkAttribute.IsValid(System.Object)">
            <summary>
            是否檢核通過。
            </summary>
            <param name="value">要檢核的物件類別。</param>
            <returns>驗證成功為 True 否則為 False。</returns>
        </member>
        <member name="T:AllPay.Payment.Integration.RequiredByDonationAttribute">
            <summary>
            依據是否捐贈電子發票檢查該欄位是否必填的類別。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.RequiredByDonationAttribute.#ctor">
            <summary>
            依據是否捐贈電子發票檢查該欄位是否必填的類別建構式。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.RequiredByDonationAttribute.IsValid(System.Object)">
            <summary>
            是否檢核通過。
            </summary>
            <param name="value">要檢核的物件類別。</param>
            <returns>驗證成功為 True 否則為 False。</returns>
        </member>
        <member name="T:AllPay.Payment.Integration.ShippingState">
            <summary>
            出貨狀態。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.ShippingState.Delivery">
            <summary>
            出貨。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.ShippingState.Cancel">
            <summary>
            取消出貨(當為無貨可出等原因需要取消出貨)。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.HttpMethod">
            <summary>
            傳遞服務的方法。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.HttpMethod.HttpGET">
            <summary>
            GET。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.HttpMethod.HttpPOST">
            <summary>
            POST。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.HttpMethod.ServerPOST">
            <summary>
            Server POST。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.HttpMethod.HttpSOAP">
            <summary>
            SOAP(WebService)。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.AllInEscrowMetadata">
            <summary>
            履約保證介接參數的類別。
            </summary>
            <summary>
            履約保證介接參數的類別。
            </summary>
            <summary>
            履約保證介接參數的類別。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInEscrowMetadata.#ctor">
            <summary>
            履約保證介接參數的建構式。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInEscrowMetadata.Send_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            特定屬性參數修改時觸發同步異動的事件。
            </summary>
            <param name="sender">來源物件。</param>
            <param name="e">提供 System.ComponentModel.INotifyPropertyChanged.PropertyChanged 事件的資料。</param>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInEscrowMetadata.Send">
            <summary>
            介接產生訂單的基本資料傳遞成員。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInEscrowMetadata.Query">
            <summary>
            介接訂單查詢的資料傳遞成員。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInEscrowMetadata.Delivery">
            <summary>
            介接出貨通知的資料傳遞成員。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInEscrowMetadata.Change">
            <summary>
            商品異常/取消訂單處理結果的資料傳遞成員。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.AllInEscrowMetadata.DeliveryArguments">
            <summary>
            出貨通知介接的資料傳遞成員類別。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInEscrowMetadata.DeliveryArguments.#ctor">
            <summary>
            出貨通知介接參數的建構式。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInEscrowMetadata.DeliveryArguments.MerchantTradeNo">
            <summary>
            廠商交易編號。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInEscrowMetadata.DeliveryArguments.TradeNo">
            <summary>
            廠商驗證時間(自動產生)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInEscrowMetadata.DeliveryArguments.ShippingState">
            <summary>
            出貨狀態。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInEscrowMetadata.DeliveryArguments.ShippingDate">
            <summary>
            出貨時間。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInEscrowMetadata.DeliveryArguments.EncodeChartset">
            <summary>
            中文編碼格式。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInEscrowMetadata.DeliveryArguments.Remark">
            <summary>
            備註欄位。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.AllInEscrowMetadata.OrderChangeArguments">
            <summary>
            出貨通知介接的資料傳遞成員類別。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInEscrowMetadata.OrderChangeArguments.#ctor">
            <summary>
            出貨通知介接參數的建構式。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInEscrowMetadata.OrderChangeArguments.MerchantTradeNo">
            <summary>
            廠商交易編號。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInEscrowMetadata.OrderChangeArguments.TradeNo">
            <summary>
            AllPay 交易編號。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInEscrowMetadata.OrderChangeArguments.InfoType">
            <summary>
            通知種類。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInEscrowMetadata.OrderChangeArguments.RefundAmount">
            <summary>
            退款金額。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInEscrowMetadata.OrderChangeArguments.Remark">
            <summary>
            備註欄位。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.AllInEscrowMetadata.SendArguments">
            <summary>
            介接的基本資料傳遞成員類別。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInEscrowMetadata.SendArguments.#ctor">
            <summary>
            介接的基本資料傳遞成員類別建構式。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInEscrowMetadata.SendArguments.Items_CollectionChanged(System.Object,AllPay.Payment.Integration.ItemCollectionEventArgs)">
            <summary>
            當產品集合被異動時，觸發連動的事件。
            </summary>
            <param name="sender">來源物件。</param>
            <param name="e">提供 System.ComponentModel.INotifyPropertyChanged.PropertyChanged 事件的資料。</param>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInEscrowMetadata.SendArguments.RaisePropertyEvents``1(System.Linq.Expressions.Expression{System.Func{AllPay.Payment.Integration.AllInEscrowMetadata.SendArguments,``0}})">
            <summary>
            實作事件觸發時要處理的方法。
            </summary>
            <typeparam name="T">觸發事件的屬性型別。</typeparam>
            <param name="property">屬性參數。</param>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInEscrowMetadata.SendArguments.Currency">
            <summary>
            幣別。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInEscrowMetadata.SendArguments.EncodeChartset">
            <summary>
            中文編碼格式。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInEscrowMetadata.SendArguments.UseAllpayAddress">
            <summary>
            是否採用 Allpay 平台提供的住址(0: 不使用, 1: 使用)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInEscrowMetadata.SendArguments.CreditInstallment">
            <summary>
            刷卡分期期數(不提供分期，預設 0)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInEscrowMetadata.SendArguments.InstallmentAmount">
            <summary>
            使用刷卡分期的付款金額(不使用信用卡分期時，預設 0)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInEscrowMetadata.SendArguments.Redeem">
            <summary>
            信用卡是否使用紅利折抵(使用紅利折抵時，請設為 Y 時)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInEscrowMetadata.SendArguments.ShippingDate">
            <summary>
            預計出貨日。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInEscrowMetadata.SendArguments.ConsiderHour">
            <summary>
            商品猶豫期時間(預設 168 小時)。
            </summary>
        </member>
        <member name="E:AllPay.Payment.Integration.AllInEscrowMetadata.SendArguments.PropertyChanged">
            <summary>
            屬性值變更時，所要觸發的事件。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.AllInEscrowMetadata.QueryArguments">
            <summary>
            介接訂單查詢的資料傳遞成員類別。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInEscrowMetadata.QueryArguments.#ctor">
            <summary>
            介接訂單查詢的資料建構式。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.TradeDateType">
            <summary>
            查詢日期類型。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.TradeDateType.Payment">
            <summary>
            付款日期。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.TradeDateType.Appropriation">
            <summary>
            撥款日期。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.TradeDateType.Refund">
            <summary>
            退款日期。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.TradeDateType.Order">
            <summary>
            訂單日期。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.PaymentState">
            <summary>
            付款狀態。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentState.ALL">
            <summary>
            全部。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentState.Nonpayment">
            <summary>
            未付款。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentState.Paid">
            <summary>
            已付款。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentState.Fail">
            <summary>
            平台商。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.NotifiedType">
            <summary>
            通知種類。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.NotifiedType.RefundPartAmount">
            <summary>
            退回部分金額。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.NotifiedType.RefundAllAmount">
            <summary>
            退回全部金額。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.NotifiedType.Redelivery">
            <summary>
            換貨後重新出貨。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.NotifiedType.GoodsNoAbnormality">
            <summary>
            商品無異常。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.ChannelProvider">
            <summary>
            此處理站可建立不同型別的通道，用戶端使用這些通道將訊息傳送給各種已設定的服務端點。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.ChannelProvider.CreateChannel``1(System.String)">
            <summary>
            建立指定的型別通道。
            </summary>
            <typeparam name="TChannel">由通道處理站產生的通道型別。這個型別必須是 System.ServiceModel.Channels.IOutputChannel 或 System.ServiceModel.Channels.IRequestChannel。</typeparam>
            <param name="uri">提供服務位置的位址(設定檔使用的模式為 CLASS 動態連結檔時，請帶入 Assembly Qualified Name：若組件有強勢名稱請帶入完整的 Assembly Qualified Name)。
            Assembly Qualified Name 範例：System.Web.UI.WebControls.TextBox, System.Web、System.Web.UI.WebControls.TextBox, System.Web, Version=4.0.0.0、
            System.Web.UI.WebControls.TextBox, System.Web, Version=4.0.0.0, Culture=neutral 或 System.Web.UI.WebControls.TextBox, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
            </param>
            <returns>由處理站所建立之 System.ServiceModel.Channels.IChannel 型別的 TChannel。</returns>
        </member>
        <member name="T:AllPay.Payment.Integration.PrintFlag">
            <summary>
            是否列印。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PrintFlag.None">
            <summary>
            無(當 InvoiceMark=No 時，為該值)。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PrintFlag.Yes">
            <summary>
            要列印。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PrintFlag.No">
            <summary>
            不列印。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.RequiredByPrintAttribute">
            <summary>
            依據列印註記檢查該欄位是否必填的類別。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.RequiredByPrintAttribute.#ctor">
            <summary>
            依據列印註記檢查該欄位是否必填的類別建構式。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.RequiredByPrintAttribute.IsValid(System.Object)">
            <summary>
            是否檢核通過。
            </summary>
            <param name="value">要檢核的物件類別。</param>
            <returns>驗證成功為 True 否則為 False。</returns>
        </member>
        <member name="T:AllPay.Payment.Integration.PeriodType">
            <summary>
            定期定額的週期種類。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PeriodType.None">
            <summary>
            無。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PeriodType.Year">
            <summary>
            年。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PeriodType.Month">
            <summary>
            月。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PeriodType.Day">
            <summary>
            日。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.PeriodCreditCardTradeInfo">
            <summary>
            定期定額回傳的介接參數的類別。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.PeriodCreditCardTradeInfo.#ctor">
            <summary>
            定期定額回傳的介接參數的類別建構式。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.PeriodCreditCardTradeInfo.MerchantID">
            <summary>
            廠商編號。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.PeriodCreditCardTradeInfo.MerchantTradeNo">
            <summary>
            廠商交易編號。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.PeriodCreditCardTradeInfo.TradeNo">
            <summary>
            AllPay 的交易編號。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.PeriodCreditCardTradeInfo.RtnCode">
            <summary>
            交易狀態(1: 授權成功，其餘為失敗，失敗代碼請參考交易訊息代碼一覽表)
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.PeriodCreditCardTradeInfo.PeriodType">
            <summary>
            定期定額的週期種類。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.PeriodCreditCardTradeInfo.Frequency">
            <summary>
            定期定額的執行頻率。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.PeriodCreditCardTradeInfo.ExecTimes">
            <summary>
            定期定額的執行次數。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.PeriodCreditCardTradeInfo.PeriodAmount">
            <summary>
            定期定額每次授權金額。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.PeriodCreditCardTradeInfo.amount">
            <summary>
            授權金額。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.PeriodCreditCardTradeInfo.gwsr">
            <summary>
            授權交易單號。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.PeriodCreditCardTradeInfo.process_date">
            <summary>
            授權成功處理時間。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.PeriodCreditCardTradeInfo.auth_code">
            <summary>
            授權碼。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.PeriodCreditCardTradeInfo.card4no">
            <summary>
            卡片的末4碼。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.PeriodCreditCardTradeInfo.card6no">
            <summary>
            卡片的末6碼。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.PeriodCreditCardTradeInfo.TotalSuccessTimes">
            <summary>
            已成功授權次數合計。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.PeriodCreditCardTradeInfo.TotalSuccessAmount">
            <summary>
            已成功授權總金額。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.PeriodCreditCardTradeInfo.ExecLog">
            <summary>
            每次授權明細。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.PeriodCreditCardTradeInfoLog">
            <summary>
            每次授權明細的介接參數的類別。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.PeriodCreditCardTradeInfoLog.#ctor">
            <summary>
            每次授權明細的介接參數的類別建構式。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.PeriodCreditCardTradeInfoLog.RtnCode">
            <summary>
            交易狀態(1: 授權成功，其餘為失敗，失敗代碼請參考交易訊息代碼一覽表)
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.PeriodCreditCardTradeInfoLog.amount">
            <summary>
            授權金額。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.PeriodCreditCardTradeInfoLog.gwsr">
            <summary>
            授權交易單號。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.PeriodCreditCardTradeInfoLog.process_date">
            <summary>
            授權成功處理時間。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.PeriodCreditCardTradeInfoLog.auth_code">
            <summary>
            授權碼。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.HoldTradeType">
            <summary>
            是否要延遲撥款。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.HoldTradeType.Yes">
            <summary>
            要延遲撥款。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.HoldTradeType.No">
            <summary>
            不要延遲撥款。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.ItemCollectionEventHandler">
            <summary>
            產品項目集合變更事件的 Handler。
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:AllPay.Payment.Integration.ItemCollectionEventArgs">
            <summary>
            產品項目集合變更事件的事件參數類別。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.ItemCollectionEventArgs.#ctor(System.Object,System.String)">
            <summary>
            產品項目集合變更事件的事件參數類別建構式。
            </summary>
            <param name="sender">觸發事件的物件來源。</param>
            <param name="methodName">變更事件的方法名稱。</param>
        </member>
        <member name="P:AllPay.Payment.Integration.ItemCollectionEventArgs.MethodName">
            <summary>
            變更事件的方法名稱。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.PlatformState">
            <summary>
            訂單類型。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PlatformState.ALL">
            <summary>
            全部。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PlatformState.General">
            <summary>
            一般。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PlatformState.Platform">
            <summary>
            平台商。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.InvoiceState">
            <summary>
            電子發票開立註記。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.InvoiceState.Yes">
            <summary>
            需要開立電子發票。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.InvoiceState.No">
            <summary>
            不需要開立電子發票。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.Item">
            <summary>
            商品項目。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.Item.#ctor">
            <summary>
            商品項目的建構式。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.Item.Name">
            <summary>
            商品名稱。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.Item.Price">
            <summary>
            商品金額。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.Item.Currency">
            <summary>
            商品貨幣。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.Item.Quantity">
            <summary>
            商品訂購數量。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.Item.Unit">
            <summary>
            商品單位(當 InvoiceMark=Yes 時，則必填)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.Item.TaxType">
            <summary>
            商品課稅別(當 InvoiceMark=Yes 時，則必填)。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.Item.URL">
            <summary>
            商品銷售(介紹)的網址。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.ItemCollection">
            <summary>
            商品項目的集合類別。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.ItemCollection.Add(AllPay.Payment.Integration.Item)">
            <summary>
            將物件加入至商品集合的結尾。
            </summary>
            <param name="item">要加入至商品集合結尾的物件。</param>
        </member>
        <member name="M:AllPay.Payment.Integration.ItemCollection.AddRange(System.Collections.Generic.IEnumerable{AllPay.Payment.Integration.Item})">
            <summary>
            將特定商品集合的元素加入至商品集合的結尾。
            </summary>
            <param name="collection">商品集合，其元素應加入至商品集合的結尾。集合本身不能是 null，但它可以包含 null 的元素。</param>
        </member>
        <member name="M:AllPay.Payment.Integration.ItemCollection.Clear">
            <summary>
            將所有元素從商品集合移除。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.ItemCollection.Insert(System.Int32,AllPay.Payment.Integration.Item)">
            <summary>
            將項目插入商品集合中指定的索引處。
            </summary>
            <param name="index">應在該處插入 item 之以零起始的索引。</param>
            <param name="item">要插入的物件。</param>
        </member>
        <member name="M:AllPay.Payment.Integration.ItemCollection.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{AllPay.Payment.Integration.Item})">
            <summary>
            將商品集合的元素插入至位於指定索引的商品集合中。
            </summary>
            <param name="index">應插入新元素處的以零起始的索引。</param>
            <param name="collection">商品集合，其項目應插入至商品集合。集合本身不能是 null，但它可以包含 null 的項目。</param>
        </member>
        <member name="M:AllPay.Payment.Integration.ItemCollection.Remove(AllPay.Payment.Integration.Item)">
            <summary>
            從商品集合移除特定物件的第一個相符項目。
            </summary>
            <param name="item">要從商品集合中移除的物件。參考型別的值可以是 null。</param>
            <returns>如果成功移除 item 則為 true，否則為 false。如果在商品集合中找不到 item，則這個方法也會傳回 false。</returns>
        </member>
        <member name="M:AllPay.Payment.Integration.ItemCollection.RemoveAll(System.Predicate{AllPay.Payment.Integration.Item})">
            <summary>
            移除符合指定之述詞所定義的條件之所有項目。
            </summary>
            <param name="match">定義要移除項目之條件的 System.Predicate&lt;T&gt; 委派。</param>
            <returns>商品集合中已移除的項目數。</returns>
        </member>
        <member name="M:AllPay.Payment.Integration.ItemCollection.RemoveAt(System.Int32)">
            <summary>
            移除商品集合中指定之索引處的項目。
            </summary>
            <param name="index">要移除元素之以零起始的索引。</param>
        </member>
        <member name="M:AllPay.Payment.Integration.ItemCollection.RemoveRange(System.Int32,System.Int32)">
            <summary>
            從商品集合移除的元素範圍。
            </summary>
            <param name="index">要移除之元素範圍內之以零起始的起始索引。</param>
            <param name="count">要移除的元素數目。</param>
        </member>
        <member name="M:AllPay.Payment.Integration.ItemCollection.RaiseCollectionEvents(System.String)">
            <summary>
            實作事件觸發時要處理的方法。
            </summary>
            <param name="methodName">屬性參數。</param>
        </member>
        <member name="E:AllPay.Payment.Integration.ItemCollection.CollectionChanged">
            <summary>
            資料集合被異動時的事件。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.RequiredByTaxTypeAttribute">
            <summary>
            依據課稅類別檢查該欄位是否必填的類別。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.RequiredByTaxTypeAttribute.#ctor">
            <summary>
            依據課稅類別檢查該欄位是否必填的類別建構式。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.RequiredByTaxTypeAttribute.IsValid(System.Object)">
            <summary>
            是否檢核通過。
            </summary>
            <param name="value">要檢核的物件類別。</param>
            <returns>驗證成功為 True 否則為 False。</returns>
        </member>
        <member name="T:AllPay.Payment.Integration.AllInOne">
            <summary>
            歐付寶 All In One 金流介接模組。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOne.#ctor">
            <summary>
            全功能介接的建構式。
            </summary>
            <example>
            <code>
            /*
             *  全功能介接的建構範例程式碼。
             */
            try
            {
                using (AllInOne oPayment = new AllInOne())
                {
                    ......
                }
            }
            catch (Exception ex)
            {
                ......
            }
            finally
            {
                ......
            }
            </code>
            </example>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOne.CheckOut">
             <summary>
             訂單產生(不支援 Ajax 非同步)。
             </summary>
             <returns>錯誤訊息的集合字串。</returns>
             <remarks>
             該方法自動產生 Http POST 頁面，將參數送至 AllInOne.ServiceURL 位址，
             需於 Web 站台或 Web 專案中撰寫以下程式碼才能正常送出訂單資料。
             </remarks>
             <example>
             <code>
             /*
              *  產生訂單的範例程式碼。
              */
             List&lt;string&gt; enErrors = new List&lt;string&gt;();
            
             try
             {
                 using (AllInOne oPayment = new AllInOne())
                 {
                     /* 服務參數 */
                     oPayment.ServiceMethod = HttpMethod.HttpPOST;
                     oPayment.ServiceURL = "&lt;&lt;AllPay Service URL&gt;&gt;";
                     oPayment.HashKey = "&lt;&lt;Hash Key&gt;&gt;";
                     oPayment.HashIV = "&lt;&lt;Hash IV&gt;&gt;";
                     oPayment.MerchantID = "&lt;&lt;Merchant ID&gt;&gt;";
                     /* 基本參數 */
                     oPayment.Send.ReturnURL = "&lt;&lt;Return URL&gt;&gt;";
                     oPayment.Send.ClientBackURL = "&lt;&lt;Client Back URL&gt;&gt;";
                     oPayment.Send.OrderResultURL = "&lt;&lt;Order Result URL&gt;&gt;";
                     oPayment.Send.MerchantTradeNo = "&lt;&lt;Merchant Trade No&gt;&gt;";
                     oPayment.Send.MerchantTradeDate = DateTime.Parse("&lt;&lt;MerchantTradeDate&gt;&gt;");
                     oPayment.Send.TotalAmount = Decimal.Parse("&lt;&lt;Total Amount&gt;&gt;");
                     oPayment.Send.TradeDesc = "&lt;&lt;Trade Desc&gt;&gt;";
                     oPayment.Send.ChoosePayment = (PaymentMethod)Enum.Parse(typeof(PaymentMethod), "&lt;&lt;Choose Payment&gt;&gt;");
                     oPayment.Send.Remark = "&lt;&lt;Remark&gt;&gt;";
                     oPayment.Send.ChooseSubPayment = (PaymentMethodItem)Enum.Parse(typeof(PaymentMethodItem), "&lt;&lt;Choose Sub Payment&gt;&gt;");
                     oPayment.Send.NeedExtraPaidInfo = (ExtraPaymentInfo)Enum.Parse(typeof(ExtraPaymentInfo), "&lt;&lt;NeedExtraPaidInfo&gt;&gt;");
                     oPayment.Send.DeviceSource = (DeviceType)Enum.Parse(typeof(DeviceType), "&lt;&lt;DeviceSource&gt;&gt;");
                     // 加入選購商品資料。
                     oPayment.Send.Items.Add(new Item() { Name = "&lt;&lt;Product Name&gt;&gt;", Price = Decimal.Parse("&lt;&lt;Unit Price&gt;&gt;"), Currency = "&lt;&lt;Currency&gt;&gt;", Quantity = Int32.Parse("&lt;&lt;Quantity&gt;&gt;"), URL = "&lt;&lt;Product Detail URL&gt;&gt;" });
                     oPayment.Send.Items.Add(new Item() { Name = "&lt;&lt;Product Name&gt;&gt;", Price = Decimal.Parse("&lt;&lt;Unit Price&gt;&gt;"), Currency = "&lt;&lt;Currency&gt;&gt;", Quantity = Int32.Parse("&lt;&lt;Quantity&gt;&gt;"), URL = "&lt;&lt;Product Detail URL&gt;&gt;" });
                     oPayment.Send.Items.Add(new Item() { Name = "&lt;&lt;Product Name&gt;&gt;", Price = Decimal.Parse("&lt;&lt;Unit Price&gt;&gt;"), Currency = "&lt;&lt;Currency&gt;&gt;", Quantity = Int32.Parse("&lt;&lt;Quantity&gt;&gt;"), URL = "&lt;&lt;Product Detail URL&gt;&gt;" });
            
                     string szExtendValue = String.Empty;
                     /* ATM 延伸參數 */
                     szExtendValue = "&lt;&lt;Expire Date&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.ExpireDate = Int32.Parse(szExtendValue);
                     /* CVS, BARCODE 延伸參數 */
                     szExtendValue = "&lt;&lt;Desc 1&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.Desc_1 = szExtendValue;
                     szExtendValue = "&lt;&lt;Desc 2&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.Desc_2 = szExtendValue;
                     szExtendValue = "&lt;&lt;Desc 3&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.Desc_3 = szExtendValue;
                     szExtendValue = "&lt;&lt;Desc 4&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.Desc_4 = szExtendValue;
                     /* Alipay 延伸參數 */
                     szExtendValue = "&lt;&lt;Email&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.Email = szExtendValue;
                     szExtendValue = "&lt;&lt;Phone No&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.PhoneNo = szExtendValue;
                     szExtendValue = "&lt;&lt;Username&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.UserName = szExtendValue;
                     /* Tenpay 延伸參數 */
                     szExtendValue = "&lt;&lt;Expire Time&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.ExpireTime = DateTime.Parse(szExtendValue);
                     /* Credit 分期延伸參數 */
                     szExtendValue = "&lt;&lt;Credit Installment&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.CreditInstallment = Int32.Parse(szExtendValue);
                     szExtendValue = "&lt;&lt;Installment Amount&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.InstallmentAmount = Decimal.Parse(szExtendValue);
                     szExtendValue = "&lt;&lt;Redeem&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.Redeem = Boolean.Parse(szExtendValue);
                     szExtendValue = "&lt;&lt;Union Pay&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.UnionPay = Boolean.Parse(szExtendValue);
                     /* Credit 定期定額延伸參數 */
                     szExtendValue = "&lt;&lt;Period Amount&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.PeriodAmount = Int32.Parse(szExtendValue);
                     szExtendValue = "&lt;&lt;Period Type&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.PeriodType = (PeriodType)Enum.Parse(typeof(PeriodType), szExtendValue);
                     szExtendValue = "&lt;&lt;Frequency&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.Frequency = Int32.Parse(szExtendValue);
                     szExtendValue = "&lt;&lt;Exec Times&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.ExecTimes = Int32.Parse(szExtendValue);
                     szExtendValue = "&lt;&lt;Period Return URL&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.PeriodReturnURL = szExtendValue;
                     /* ATM, CVS, BARCODE 回傳網址的延伸參數 */
                     szExtendValue = "&lt;&lt;Payment Info URL&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.PaymentInfoURL = szExtendValue;
                     /* 產生訂單 */
                     enErrors.AddRange(oPayment.CheckOut());
                 }
             }
             catch (Exception ex)
             {
                 // 例外錯誤處理。
                 enErrors.Add(ex.Message);
             }
             finally
             {
                 // 顯示錯誤訊息。
                 if (enErrors.Count() &gt; 0)
                 {
                     ScriptManager.RegisterStartupScript(this, typeof(Page), "_MESSAGE", String.Format("alert(\"{0}\");", String.Join("\\r\\n", enErrors)), true);
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOne.CheckOut(System.String)">
             <summary>
             訂單產生(不支援 Ajax 非同步)。
             </summary>
             <param name="target">目標視窗</param>
             <returns>錯誤訊息的集合字串。</returns>
             <remarks>
             該方法自動產生 Http POST 頁面，將參數送至 AllInOne.ServiceURL 位址，
             需於 Web 站台或 Web 專案中撰寫以下程式碼才能正常送出訂單資料。
             </remarks>
             <example>
             <code>
             /*
              *  產生訂單的範例程式碼。
              */
             List&lt;string&gt; enErrors = new List&lt;string&gt;();
            
             try
             {
                 using (AllInOne oPayment = new AllInOne())
                 {
                     /* 服務參數 */
                     oPayment.ServiceMethod = HttpMethod.HttpPOST;
                     oPayment.ServiceURL = "&lt;&lt;AllPay Service URL&gt;&gt;";
                     oPayment.HashKey = "&lt;&lt;Hash Key&gt;&gt;";
                     oPayment.HashIV = "&lt;&lt;Hash IV&gt;&gt;";
                     oPayment.MerchantID = "&lt;&lt;Merchant ID&gt;&gt;";
                     /* 基本參數 */
                     oPayment.Send.ReturnURL = "&lt;&lt;Return URL&gt;&gt;";
                     oPayment.Send.ClientBackURL = "&lt;&lt;Client Back URL&gt;&gt;";
                     oPayment.Send.OrderResultURL = "&lt;&lt;Order Result URL&gt;&gt;";
                     oPayment.Send.MerchantTradeNo = "&lt;&lt;Merchant Trade No&gt;&gt;";
                     oPayment.Send.MerchantTradeDate = DateTime.Parse("&lt;&lt;MerchantTradeDate&gt;&gt;");
                     oPayment.Send.TotalAmount = Decimal.Parse("&lt;&lt;Total Amount&gt;&gt;");
                     oPayment.Send.TradeDesc = "&lt;&lt;Trade Desc&gt;&gt;";
                     oPayment.Send.ChoosePayment = (PaymentMethod)Enum.Parse(typeof(PaymentMethod), "&lt;&lt;Choose Payment&gt;&gt;");
                     oPayment.Send.Remark = "&lt;&lt;Remark&gt;&gt;";
                     oPayment.Send.ChooseSubPayment = (PaymentMethodItem)Enum.Parse(typeof(PaymentMethodItem), "&lt;&lt;Choose Sub Payment&gt;&gt;");
                     oPayment.Send.NeedExtraPaidInfo = (ExtraPaymentInfo)Enum.Parse(typeof(ExtraPaymentInfo), "&lt;&lt;NeedExtraPaidInfo&gt;&gt;");
                     oPayment.Send.DeviceSource = (DeviceType)Enum.Parse(typeof(DeviceType), "&lt;&lt;DeviceSource&gt;&gt;");
                     // 加入選購商品資料。
                     oPayment.Send.Items.Add(new Item() { Name = "&lt;&lt;Product Name&gt;&gt;", Price = Decimal.Parse("&lt;&lt;Unit Price&gt;&gt;"), Currency = "&lt;&lt;Currency&gt;&gt;", Quantity = Int32.Parse("&lt;&lt;Quantity&gt;&gt;"), URL = "&lt;&lt;Product Detail URL&gt;&gt;" });
                     oPayment.Send.Items.Add(new Item() { Name = "&lt;&lt;Product Name&gt;&gt;", Price = Decimal.Parse("&lt;&lt;Unit Price&gt;&gt;"), Currency = "&lt;&lt;Currency&gt;&gt;", Quantity = Int32.Parse("&lt;&lt;Quantity&gt;&gt;"), URL = "&lt;&lt;Product Detail URL&gt;&gt;" });
                     oPayment.Send.Items.Add(new Item() { Name = "&lt;&lt;Product Name&gt;&gt;", Price = Decimal.Parse("&lt;&lt;Unit Price&gt;&gt;"), Currency = "&lt;&lt;Currency&gt;&gt;", Quantity = Int32.Parse("&lt;&lt;Quantity&gt;&gt;"), URL = "&lt;&lt;Product Detail URL&gt;&gt;" });
            
                     string szExtendValue = String.Empty;
                     /* ATM 延伸參數 */
                     szExtendValue = "&lt;&lt;Expire Date&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.ExpireDate = Int32.Parse(szExtendValue);
                     /* CVS, BARCODE 延伸參數 */
                     szExtendValue = "&lt;&lt;Desc 1&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.Desc_1 = szExtendValue;
                     szExtendValue = "&lt;&lt;Desc 2&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.Desc_2 = szExtendValue;
                     szExtendValue = "&lt;&lt;Desc 3&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.Desc_3 = szExtendValue;
                     szExtendValue = "&lt;&lt;Desc 4&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.Desc_4 = szExtendValue;
                     /* Alipay 延伸參數 */
                     szExtendValue = "&lt;&lt;Email&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.Email = szExtendValue;
                     szExtendValue = "&lt;&lt;Phone No&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.PhoneNo = szExtendValue;
                     szExtendValue = "&lt;&lt;Username&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.UserName = szExtendValue;
                     /* Tenpay 延伸參數 */
                     szExtendValue = "&lt;&lt;Expire Time&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.ExpireTime = DateTime.Parse(szExtendValue);
                     /* Credit 分期延伸參數 */
                     szExtendValue = "&lt;&lt;Credit Installment&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.CreditInstallment = Int32.Parse(szExtendValue);
                     szExtendValue = "&lt;&lt;Installment Amount&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.InstallmentAmount = Decimal.Parse(szExtendValue);
                     szExtendValue = "&lt;&lt;Redeem&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.Redeem = Boolean.Parse(szExtendValue);
                     szExtendValue = "&lt;&lt;Union Pay&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.UnionPay = Boolean.Parse(szExtendValue);
                     /* Credit 定期定額延伸參數 */
                     szExtendValue = "&lt;&lt;Period Amount&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.PeriodAmount = Int32.Parse(szExtendValue);
                     szExtendValue = "&lt;&lt;Period Type&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.PeriodType = (PeriodType)Enum.Parse(typeof(PeriodType), szExtendValue);
                     szExtendValue = "&lt;&lt;Frequency&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.Frequency = Int32.Parse(szExtendValue);
                     szExtendValue = "&lt;&lt;Exec Times&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.ExecTimes = Int32.Parse(szExtendValue);
                     szExtendValue = "&lt;&lt;Period Return URL&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.PeriodReturnURL = szExtendValue;
                     /* ATM, CVS, BARCODE 回傳網址的延伸參數 */
                     szExtendValue = "&lt;&lt;Payment Info URL&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.PaymentInfoURL = szExtendValue;
                     /* 產生訂單 */
                     enErrors.AddRange(oPayment.CheckOut("newForm"));
                 }
             }
             catch (Exception ex)
             {
                 // 例外錯誤處理。
                 enErrors.Add(ex.Message);
             }
             finally
             {
                 // 顯示錯誤訊息。
                 if (enErrors.Count() &gt; 0)
                 {
                     ScriptManager.RegisterStartupScript(this, typeof(Page), "_MESSAGE", String.Format("alert(\"{0}\");", String.Join("\\r\\n", enErrors)), true);
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOne.CheckOutString(System.String@)">
             <summary>
             訂單產生(支援 Ajax 非同步與 MVC)。
             </summary>
             <param name="html"></param>
             <returns>錯誤訊息的集合字串。</returns>
             <remarks>
             該方法自動產生 Http POST 頁面的 Html 表單，將參數送至 AllInOne.ServiceURL 位址，
             需於 Web 站台或 Web 專案中撰寫以下程式碼才能正常送出訂單資料。
             </remarks>
             <example>
             <code>
             /*
              *  產生訂單的範例程式碼。
              */
             List&lt;string&gt; enErrors = new List&lt;string&gt;();
             string szHtml = String.Empty;
            
             try
             {
                 using (AllInOne oPayment = new AllInOne())
                 {
                     /* 服務參數 */
                     oPayment.ServiceMethod = HttpMethod.HttpPOST;
                     oPayment.ServiceURL = "&lt;&lt;AllPay Service URL&gt;&gt;";
                     oPayment.HashKey = "&lt;&lt;Hash Key&gt;&gt;";
                     oPayment.HashIV = "&lt;&lt;Hash IV&gt;&gt;";
                     oPayment.MerchantID = "&lt;&lt;Merchant ID&gt;&gt;";
                     /* 基本參數 */
                     oPayment.Send.ReturnURL = "&lt;&lt;Return URL&gt;&gt;";
                     oPayment.Send.ClientBackURL = "&lt;&lt;Client Back URL&gt;&gt;";
                     oPayment.Send.OrderResultURL = "&lt;&lt;Order Result URL&gt;&gt;";
                     oPayment.Send.MerchantTradeNo = "&lt;&lt;Merchant Trade No&gt;&gt;";
                     oPayment.Send.MerchantTradeDate = DateTime.Parse("&lt;&lt;MerchantTradeDate&gt;&gt;");
                     oPayment.Send.TotalAmount = Decimal.Parse("&lt;&lt;Total Amount&gt;&gt;");
                     oPayment.Send.TradeDesc = "&lt;&lt;Trade Desc&gt;&gt;";
                     oPayment.Send.ChoosePayment = (PaymentMethod)Enum.Parse(typeof(PaymentMethod), "&lt;&lt;Choose Payment&gt;&gt;");
                     oPayment.Send.Remark = "&lt;&lt;Remark&gt;&gt;";
                     oPayment.Send.ChooseSubPayment = (PaymentMethodItem)Enum.Parse(typeof(PaymentMethodItem), "&lt;&lt;Choose Sub Payment&gt;&gt;");
                     oPayment.Send.NeedExtraPaidInfo = (ExtraPaymentInfo)Enum.Parse(typeof(ExtraPaymentInfo), "&lt;&lt;NeedExtraPaidInfo&gt;&gt;");
                     oPayment.Send.DeviceSource = (DeviceType)Enum.Parse(typeof(DeviceType), "&lt;&lt;DeviceSource&gt;&gt;");
                     // 加入選購商品資料。
                     oPayment.Send.Items.Add(new Item() { Name = "&lt;&lt;Product Name&gt;&gt;", Price = Decimal.Parse("&lt;&lt;Unit Price&gt;&gt;"), Currency = "&lt;&lt;Currency&gt;&gt;", Quantity = Int32.Parse("&lt;&lt;Quantity&gt;&gt;"), URL = "&lt;&lt;Product Detail URL&gt;&gt;" });
                     oPayment.Send.Items.Add(new Item() { Name = "&lt;&lt;Product Name&gt;&gt;", Price = Decimal.Parse("&lt;&lt;Unit Price&gt;&gt;"), Currency = "&lt;&lt;Currency&gt;&gt;", Quantity = Int32.Parse("&lt;&lt;Quantity&gt;&gt;"), URL = "&lt;&lt;Product Detail URL&gt;&gt;" });
                     oPayment.Send.Items.Add(new Item() { Name = "&lt;&lt;Product Name&gt;&gt;", Price = Decimal.Parse("&lt;&lt;Unit Price&gt;&gt;"), Currency = "&lt;&lt;Currency&gt;&gt;", Quantity = Int32.Parse("&lt;&lt;Quantity&gt;&gt;"), URL = "&lt;&lt;Product Detail URL&gt;&gt;" });
            
                     string szExtendValue = String.Empty;
                     /* ATM 延伸參數 */
                     szExtendValue = "&lt;&lt;Expire Date&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.ExpireDate = Int32.Parse(szExtendValue);
                     /* CVS, BARCODE 延伸參數 */
                     szExtendValue = "&lt;&lt;Desc 1&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.Desc_1 = szExtendValue;
                     szExtendValue = "&lt;&lt;Desc 2&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.Desc_2 = szExtendValue;
                     szExtendValue = "&lt;&lt;Desc 3&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.Desc_3 = szExtendValue;
                     szExtendValue = "&lt;&lt;Desc 4&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.Desc_4 = szExtendValue;
                     /* Alipay 延伸參數 */
                     szExtendValue = "&lt;&lt;Email&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.Email = szExtendValue;
                     szExtendValue = "&lt;&lt;Phone No&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.PhoneNo = szExtendValue;
                     szExtendValue = "&lt;&lt;Username&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.UserName = szExtendValue;
                     /* Tenpay 延伸參數 */
                     szExtendValue = "&lt;&lt;Expire Time&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.ExpireTime = DateTime.Parse(szExtendValue);
                     /* Credit 分期延伸參數 */
                     szExtendValue = "&lt;&lt;Credit Installment&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.CreditInstallment = Int32.Parse(szExtendValue);
                     szExtendValue = "&lt;&lt;Installment Amount&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.InstallmentAmount = Decimal.Parse(szExtendValue);
                     szExtendValue = "&lt;&lt;Redeem&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.Redeem = Boolean.Parse(szExtendValue);
                     szExtendValue = "&lt;&lt;Union Pay&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.UnionPay = Boolean.Parse(szExtendValue);
                     /* Credit 定期定額延伸參數 */
                     szExtendValue = "&lt;&lt;Period Amount&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.PeriodAmount = Int32.Parse(szExtendValue);
                     szExtendValue = "&lt;&lt;Period Type&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.PeriodType = (PeriodType)Enum.Parse(typeof(PeriodType), szExtendValue);
                     szExtendValue = "&lt;&lt;Frequency&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.Frequency = Int32.Parse(szExtendValue);
                     szExtendValue = "&lt;&lt;Exec Times&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.ExecTimes = Int32.Parse(szExtendValue);
                     szExtendValue = "&lt;&lt;Period Return URL&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.PeriodReturnURL = szExtendValue;
                     /* ATM, CVS, BARCODE 回傳網址的延伸參數 */
                     szExtendValue = "&lt;&lt;Payment Info URL&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.PaymentInfoURL = szExtendValue;
                     /* 產生訂單(取得 Html Code) */
                     enErrors.AddRange(oPayment.CheckOutString(ref szHtml));
                 }
             }
             catch (Exception ex)
             {
                 // 例外錯誤處理。
                 enErrors.Add(ex.Message);
             }
             finally
             {
                 // 顯示錯誤訊息。
                 if (enErrors.Count() &gt; 0)
                 {
                     ScriptManager.RegisterStartupScript(this, typeof(Page), "_MESSAGE", String.Format("alert(\"{0}\");", String.Join("\\r\\n", enErrors)), true);
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOne.CheckOutString(System.String,System.String@)">
             <summary>
             訂單產生(支援 Ajax 非同步與 MVC)。
             </summary>
             <param name="target"></param>
             <param name="html"></param>
             <returns>錯誤訊息的集合字串。</returns>
             <remarks>
             該方法自動產生 Http POST 頁面的 Html 表單，將參數送至 AllInOne.ServiceURL 位址，
             需於 Web 站台或 Web 專案中撰寫以下程式碼才能正常送出訂單資料。
             </remarks>
             <example>
             <code>
             /*
              *  產生訂單的範例程式碼。
              */
             List&lt;string&gt; enErrors = new List&lt;string&gt;();
             string szHtml = String.Empty;
            
             try
             {
                 using (AllInOne oPayment = new AllInOne())
                 {
                     /* 服務參數 */
                     oPayment.ServiceMethod = HttpMethod.HttpPOST;
                     oPayment.ServiceURL = "&lt;&lt;AllPay Service URL&gt;&gt;";
                     oPayment.HashKey = "&lt;&lt;Hash Key&gt;&gt;";
                     oPayment.HashIV = "&lt;&lt;Hash IV&gt;&gt;";
                     oPayment.MerchantID = "&lt;&lt;Merchant ID&gt;&gt;";
                     /* 基本參數 */
                     oPayment.Send.ReturnURL = "&lt;&lt;Return URL&gt;&gt;";
                     oPayment.Send.ClientBackURL = "&lt;&lt;Client Back URL&gt;&gt;";
                     oPayment.Send.OrderResultURL = "&lt;&lt;Order Result URL&gt;&gt;";
                     oPayment.Send.MerchantTradeNo = "&lt;&lt;Merchant Trade No&gt;&gt;";
                     oPayment.Send.MerchantTradeDate = DateTime.Parse("&lt;&lt;MerchantTradeDate&gt;&gt;");
                     oPayment.Send.TotalAmount = Decimal.Parse("&lt;&lt;Total Amount&gt;&gt;");
                     oPayment.Send.TradeDesc = "&lt;&lt;Trade Desc&gt;&gt;";
                     oPayment.Send.ChoosePayment = (PaymentMethod)Enum.Parse(typeof(PaymentMethod), "&lt;&lt;Choose Payment&gt;&gt;");
                     oPayment.Send.Remark = "&lt;&lt;Remark&gt;&gt;";
                     oPayment.Send.ChooseSubPayment = (PaymentMethodItem)Enum.Parse(typeof(PaymentMethodItem), "&lt;&lt;Choose Sub Payment&gt;&gt;");
                     oPayment.Send.NeedExtraPaidInfo = (ExtraPaymentInfo)Enum.Parse(typeof(ExtraPaymentInfo), "&lt;&lt;NeedExtraPaidInfo&gt;&gt;");
                     oPayment.Send.DeviceSource = (DeviceType)Enum.Parse(typeof(DeviceType), "&lt;&lt;DeviceSource&gt;&gt;");
                     // 加入選購商品資料。
                     oPayment.Send.Items.Add(new Item() { Name = "&lt;&lt;Product Name&gt;&gt;", Price = Decimal.Parse("&lt;&lt;Unit Price&gt;&gt;"), Currency = "&lt;&lt;Currency&gt;&gt;", Quantity = Int32.Parse("&lt;&lt;Quantity&gt;&gt;"), URL = "&lt;&lt;Product Detail URL&gt;&gt;" });
                     oPayment.Send.Items.Add(new Item() { Name = "&lt;&lt;Product Name&gt;&gt;", Price = Decimal.Parse("&lt;&lt;Unit Price&gt;&gt;"), Currency = "&lt;&lt;Currency&gt;&gt;", Quantity = Int32.Parse("&lt;&lt;Quantity&gt;&gt;"), URL = "&lt;&lt;Product Detail URL&gt;&gt;" });
                     oPayment.Send.Items.Add(new Item() { Name = "&lt;&lt;Product Name&gt;&gt;", Price = Decimal.Parse("&lt;&lt;Unit Price&gt;&gt;"), Currency = "&lt;&lt;Currency&gt;&gt;", Quantity = Int32.Parse("&lt;&lt;Quantity&gt;&gt;"), URL = "&lt;&lt;Product Detail URL&gt;&gt;" });
            
                     string szExtendValue = String.Empty;
                     /* ATM 延伸參數 */
                     szExtendValue = "&lt;&lt;Expire Date&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.ExpireDate = Int32.Parse(szExtendValue);
                     /* CVS, BARCODE 延伸參數 */
                     szExtendValue = "&lt;&lt;Desc 1&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.Desc_1 = szExtendValue;
                     szExtendValue = "&lt;&lt;Desc 2&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.Desc_2 = szExtendValue;
                     szExtendValue = "&lt;&lt;Desc 3&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.Desc_3 = szExtendValue;
                     szExtendValue = "&lt;&lt;Desc 4&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.Desc_4 = szExtendValue;
                     /* Alipay 延伸參數 */
                     szExtendValue = "&lt;&lt;Email&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.Email = szExtendValue;
                     szExtendValue = "&lt;&lt;Phone No&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.PhoneNo = szExtendValue;
                     szExtendValue = "&lt;&lt;Username&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.UserName = szExtendValue;
                     /* Tenpay 延伸參數 */
                     szExtendValue = "&lt;&lt;Expire Time&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.ExpireTime = DateTime.Parse(szExtendValue);
                     /* Credit 分期延伸參數 */
                     szExtendValue = "&lt;&lt;Credit Installment&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.CreditInstallment = Int32.Parse(szExtendValue);
                     szExtendValue = "&lt;&lt;Installment Amount&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.InstallmentAmount = Decimal.Parse(szExtendValue);
                     szExtendValue = "&lt;&lt;Redeem&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.Redeem = Boolean.Parse(szExtendValue);
                     szExtendValue = "&lt;&lt;Union Pay&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.UnionPay = Boolean.Parse(szExtendValue);
                     /* Credit 定期定額延伸參數 */
                     szExtendValue = "&lt;&lt;Period Amount&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.PeriodAmount = Int32.Parse(szExtendValue);
                     szExtendValue = "&lt;&lt;Period Type&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.PeriodType = (PeriodType)Enum.Parse(typeof(PeriodType), szExtendValue);
                     szExtendValue = "&lt;&lt;Frequency&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.Frequency = Int32.Parse(szExtendValue);
                     szExtendValue = "&lt;&lt;Exec Times&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.ExecTimes = Int32.Parse(szExtendValue);
                     szExtendValue = "&lt;&lt;Period Return URL&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.PeriodReturnURL = szExtendValue;
                     /* ATM, CVS, BARCODE 回傳網址的延伸參數 */
                     szExtendValue = "&lt;&lt;Payment Info URL&gt;&gt;";
                     if (!String.IsNullOrEmpty(szExtendValue)) oPayment.SendExtend.PaymentInfoURL = szExtendValue;
                     /* 產生訂單(取得 Html Code) */
                     enErrors.AddRange(oPayment.CheckOutString("newForm", ref szHtml));
                 }
             }
             catch (Exception ex)
             {
                 // 例外錯誤處理。
                 enErrors.Add(ex.Message);
             }
             finally
             {
                 // 顯示錯誤訊息。
                 if (enErrors.Count() &gt; 0)
                 {
                     ScriptManager.RegisterStartupScript(this, typeof(Page), "_MESSAGE", String.Format("alert(\"{0}\");", String.Join("\\r\\n", enErrors)), true);
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOne.CheckOutFeedback(System.Collections.Hashtable@)">
             <summary>
             取回訂單的處理結果資料。
             </summary>
             <param name="feedback">回傳的參數資料。</param>
             <returns>錯誤訊息的集合字串。</returns>
             <remarks>
             該方法對應到產生訂單方法中 AllInOne.Send.ReturnURL 的位址，
             需於 Web 站台或 Web 專案中指定的位址(頁面)撰寫以下程式碼才能正常取回處理結果。
             </remarks>
             <example>
             <code>
             /*
              *  接收訂單資料產生完成的範例程式碼。
              */
             List&lt;string&gt; enErrors = new List&lt;string&gt;();
             Hashtable htFeedback = null;
            
             try
             {
                 using (AllInOne oPayment = new AllInOne())
                 {
                     oPayment.HashKey = "&lt;&lt;Hash Key&gt;&gt;";
                     oPayment.HashIV = "&lt;&lt;Hash IV&gt;&gt;";
                     /* 取回付款結果 */
                     enErrors.AddRange(oPayment.CheckOutFeedback(ref htFeedback));
                 }
                 // 取回所有資料
                 if (enErrors.Count() == 0)
                 {
                     /* 支付後的回傳的基本參數 */
                     string szMerchantID = String.Empty;
                     string szMerchantTradeNo = String.Empty;
                     string szPaymentDate = String.Empty;
                     string szPaymentType = String.Empty;
                     string szPaymentTypeChargeFee = String.Empty;
                     string szRtnCode = String.Empty;
                     string szRtnMsg = String.Empty;
                     string szSimulatePaid = String.Empty;
                     string szTradeAmt = String.Empty;
                     string szTradeDate = String.Empty;
                     string szTradeNo = String.Empty;
                     /* 使用定期定額交易時，回傳的額外參數 */
                     string szPeriodType = String.Empty;
                     string szFrequency = String.Empty;
                     string szExecTimes = String.Empty;
                     string szAmount = String.Empty;
                     string szGwsr = String.Empty;
                     string szProcessDate = String.Empty;
                     string szAuthCode = String.Empty;
                     string szFirstAuthAmount = String.Empty;
                     string szTotalSuccessTimes = String.Empty;
                     /* 使用 ATM、CVS 或 BARCODE 交易時，回傳的額外參數 */
                     string szExpireDate = String.Empty;
                     /* 使用 ATM 交易時，回傳的額外參數 */
                     string szBankCode = String.Empty;
                     string szVirtualAccount = String.Empty;
                     /* 使用 CVS 或 BARCODE 交易時，回傳的額外參數 */
                     string szPaymentNo = String.Empty;
                     string szBarcode1 = String.Empty;
                     string szBarcode2 = String.Empty;
                     string szBarcode3 = String.Empty;
                     // 取得資料於畫面
                     foreach (string szKey in htFeedback.Keys)
                     {
                         switch (szKey)
                         {
                             /* 支付後的回傳的基本參數 */
                             case "MerchantID": szMerchantID = htFeedback[szKey].ToString(); break;
                             case "MerchantTradeNo": szMerchantTradeNo = htFeedback[szKey].ToString(); break;
                             case "PaymentDate": szPaymentDate = htFeedback[szKey].ToString(); break;
                             case "PaymentType": szPaymentType = htFeedback[szKey].ToString(); break;
                             case "PaymentTypeChargeFee": szPaymentTypeChargeFee = htFeedback[szKey].ToString(); break;
                             case "RtnCode": szRtnCode = htFeedback[szKey].ToString(); break;
                             case "RtnMsg": szRtnMsg = htFeedback[szKey].ToString(); break;
                             case "SimulatePaid": szSimulatePaid = htFeedback[szKey].ToString(); break;
                             case "TradeAmt": szTradeAmt = htFeedback[szKey].ToString(); break;
                             case "TradeDate": szTradeDate = htFeedback[szKey].ToString(); break;
                             case "TradeNo": szTradeNo = htFeedback[szKey].ToString(); break;
            
                             /* 使用定期定額交易時回傳的參數 */
                             //case "MerchantID": szMerchantID = htFeedback[szKey].ToString(); break;
                             //case "MerchantTradeNo": szMerchantTradeNo = htFeedback[szKey].ToString(); break;
                             //case "RtnCode": szRtnCode = htFeedback[szKey].ToString(); break;
                             //case "RtnMsg": szRtnMsg = htFeedback[szKey].ToString(); break;
                             //case "PeriodType": szPeriodType = htFeedback[szKey].ToString(); break;
                             //case "Frequency": szFrequency = htFeedback[szKey].ToString(); break;
                             //case "ExecTimes": szExecTimes = htFeedback[szKey].ToString(); break;
                             //case "Amount": szAmount = htFeedback[szKey].ToString(); break;
                             //case "Gwsr": szGwsr = htFeedback[szKey].ToString(); break;
                             //case "ProcessDate": szProcessDate = htFeedback[szKey].ToString(); break;
                             //case "AuthCode": szAuthCode = htFeedback[szKey].ToString(); break;
                             //case "FirstAuthAmount": szFirstAuthAmount = htFeedback[szKey].ToString(); break;
                             //case "TotalSuccessTimes": szTotalSuccessTimes = htFeedback[szKey].ToString(); break;
            
                             /* 使用 ATM 交易時回傳的參數 */
                             //case "MerchantID": szMerchantID = htFeedback[szKey].ToString(); break;
                             //case "MerchantTradeNo": szMerchantTradeNo = htFeedback[szKey].ToString(); break;
                             //case "RtnCode": szRtnCode = htFeedback[szKey].ToString(); break;
                             //case "RtnMsg": szRtnMsg = htFeedback[szKey].ToString(); break;
                             //case "TradeNo": szTradeNo = htFeedback[szKey].ToString(); break;
                             //case "TradeAmt": szTradeAmt = htFeedback[szKey].ToString(); break;
                             //case "PaymentType": szPaymentType = htFeedback[szKey].ToString(); break;
                             //case "TradeDate": szTradeDate = htFeedback[szKey].ToString(); break;
                             //case "BankCode": szBankCode = htFeedback[szKey].ToString(); break;
                             //case "vAccount": szVirtualAccount = htFeedback[szKey].ToString(); break;
                             //case "ExpireDate": szExpireDate = htFeedback[szKey].ToString(); break;
            
                             /* 使用 CVS 或 BARCODE 交易時回傳的參數 */
                             //case "MerchantID": szMerchantID = htFeedback[szKey].ToString(); break;
                             //case "MerchantTradeNo": szMerchantTradeNo = htFeedback[szKey].ToString(); break;
                             //case "RtnCode": szRtnCode = htFeedback[szKey].ToString(); break;
                             //case "RtnMsg": szRtnMsg = htFeedback[szKey].ToString(); break;
                             //case "TradeNo": szTradeNo = htFeedback[szKey].ToString(); break;
                             //case "TradeAmt": szTradeAmt = htFeedback[szKey].ToString(); break;
                             //case "PaymentType": szPaymentType = htFeedback[szKey].ToString(); break;
                             //case "TradeDate": szTradeDate = htFeedback[szKey].ToString(); break;
                             //case "PaymentNo": szPaymentNo = htFeedback[szKey].ToString(); break;
                             //case "ExpireDate": szExpireDate = htFeedback[szKey].ToString(); break;
                             //case "Barcode1": szBarcode1 = htFeedback[szKey].ToString(); break;
                             //case "Barcode2": szBarcode2 = htFeedback[szKey].ToString(); break;
                             //case "Barcode3": szBarcode3 = htFeedback[szKey].ToString(); break;
            
                             default: break;
                         }
                     }
                     // 其他資料處理。
                     ......
                 }
             }
             catch (Exception ex)
             {
                 enErrors.Add(ex.Message);
             }
             finally
             {
                 this.Response.Clear();
                 // 回覆成功訊息。
                 if (enErrors.Count() == 0)
                     this.Response.Write("1|OK");
                 // 回覆錯誤訊息。
                 else
                     this.Response.Write(String.Format("0|{0}", String.Join("\\r\\n", enErrors)));
                 this.Response.Flush();
                 this.Response.End();
             }
             </code>
             </example>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOne.QueryTradeInfo(System.Collections.Hashtable@)">
             <summary>
             訂單查詢。
             </summary>
             <param name="feedback">回傳的參數資料。</param>
             <returns>錯誤訊息的集合字串。</returns>
             <remarks>
             該方法會以 Server POST 或 Http SOAP(Web Service) 的方式送出參數至 AllInOne.ServiceURL 位址，
             網路需申請 ACL(Access Control List) 才能正常請求訂單資料的查詢。
             </remarks>
             <example>
             <code>
             /*
              *  查詢訂單的範例程式碼。
              */
             List&lt;string&gt; enErrors = new List&lt;string&gt;();
             Hashtable htFeedback = null;
            
             try
             {
                 using (AllInOne oPayment = new AllInOne())
                 {
                     /* 服務參數 */
                     oPayment.ServiceMethod = HttpMethod.ServerPOST; // 或使用 HttpMethod.HttpSOAP;
                     oPayment.ServiceURL = "&lt;&lt;AllPay Service URL&gt;&gt;";
                     oPayment.HashKey = "&lt;&lt;Hash Key&gt;&gt;";
                     oPayment.HashIV = "&lt;&lt;Hash IV&gt;&gt;";
                     oPayment.MerchantID = "&lt;&lt;Merchant ID&gt;&gt;";
                     /* 基本參數 */
                     oPayment.Query.MerchantTradeNo = "&lt;&lt;Merchant Trade No&gt;&gt;";
                     /* 查詢訂單 */
                     enErrors.AddRange(oPayment.QueryTradeInfo(ref htFeedback));
                 }
                 // 取回所有資料
                 if (enErrors.Count() == 0)
                 {
                     /* 查詢後的回傳的基本參數 */
                     string szMerchantID = String.Empty;
                     string szMerchantTradeNo = String.Empty;
                     string szTradeNo = String.Empty;
                     string szTradeAmt = String.Empty;
                     string szPaymentDate = String.Empty;
                     string szPaymentType = String.Empty;
                     string szHandlingCharge = String.Empty;
                     string szPaymentTypeChargeFee = String.Empty;
                     string szTradeDate = String.Empty;
                     string szTradeStatus = String.Empty;
                     string szItemName = String.Empty;
                     /* 使用 WebATM 交易時，回傳的額外參數 */
                     string szWebATMAccBank = String.Empty;
                     string szWebATMAccNo = String.Empty;
                     /* 使用 ATM 交易時，回傳的額外參數 */
                     string szATMAccBank = String.Empty;
                     string szATMAccNo = String.Empty;
                     /* 使用 CVS 或 BARCODE 交易時，回傳的額外參數 */
                     string szPaymentNo = String.Empty;
                     string szPayFrom = String.Empty;
                     /* 使用 Alipay 交易時，回傳的額外參數 */
                     string szAlipayID = String.Empty;
                     string szAlipayTradeNo = String.Empty;
                     /* 使用 Tenpay 交易時，回傳的額外參數 */
                     string szTenpayTradeNo = String.Empty;
                     /* 使用 Credit 交易時，回傳的額外參數 */
                     string szGwsr = String.Empty;
                     string szProcessDate = String.Empty;
                     string szAuthCode = String.Empty;
                     string szAmount = String.Empty;
                     string szStage = String.Empty;
                     string szStast = String.Empty;
                     string szStaed = String.Empty;
                     string szECI = String.Empty;
                     string szCard4No = String.Empty;
                     string szCard6No = String.Empty;
                     string szRedDan = String.Empty;
                     string szRedDeAmt = String.Empty;
                     string szRedOkAmt = String.Empty;
                     string szRedYet = String.Empty;
                     string szPeriodType = String.Empty;
                     string szFrequency = String.Empty;
                     string szExecTimes = String.Empty;
                     string szPeriodAmount = String.Empty;
                     string szTotalSuccessTimes = String.Empty;
                     string szTotalSuccessAmount = String.Empty;
                     // 取得資料於畫面
                     foreach (string szKey in htFeedback.Keys)
                     {
                         switch (szKey)
                         {
                             /* 查詢後的回傳的基本參數 */
                             case "MerchantID": szMerchantID = htFeedback[szKey].ToString(); break;
                             case "MerchantTradeNo": szMerchantTradeNo = htFeedback[szKey].ToString(); break;
                             case "TradeNo": szTradeNo = htFeedback[szKey].ToString(); break;
                             case "TradeAmt": szTradeAmt = htFeedback[szKey].ToString(); break;
                             case "PaymentDate": szPaymentDate = htFeedback[szKey].ToString(); break;
                             case "PaymentType": szPaymentType = htFeedback[szKey].ToString(); break;
                             case "HandlingCharge": szHandlingCharge = htFeedback[szKey].ToString(); break;
                             case "PaymentTypeChargeFee": szPaymentTypeChargeFee = htFeedback[szKey].ToString(); break;
                             case "TradeDate": szTradeDate = htFeedback[szKey].ToString(); break;
                             case "TradeStatus": szTradeStatus = htFeedback[szKey].ToString(); break;
                             case "ItemName": szItemName = htFeedback[szKey].ToString(); break;
            
                             /* 使用 WebATM 交易時回傳的參數 */
                             case "WebATMAccBank": szWebATMAccBank = htFeedback[szKey].ToString(); break;
                             case "WebATMAccNo": szWebATMAccNo = htFeedback[szKey].ToString(); break;
            
                             /* 使用 ATM 交易時回傳的參數 */
                             case "ATMAccBank": szATMAccBank = htFeedback[szKey].ToString(); break;
                             case "ATMAccNo": szATMAccNo = htFeedback[szKey].ToString(); break;
            
                             /* 使用 CVS 或 BARCODE 交易時回傳的參數 */
                             case "PaymentNo": szPaymentNo = htFeedback[szKey].ToString(); break;
                             case "PayFrom": szPayFrom = htFeedback[szKey].ToString(); break;
            
                             /* 使用 Alipay 交易時回傳的參數 */
                             case "AlipayID": szAlipayID = htFeedback[szKey].ToString(); break;
                             case "AlipayTradeNo": szAlipayTradeNo = htFeedback[szKey].ToString(); break;
            
                             /* 使用 Tenpay 交易時回傳的參數 */
                             case "TenpayTradeNo": szTenpayTradeNo = htFeedback[szKey].ToString(); break;
            
                             /* 使用 Credit 交易時回傳的參數 */
                             case "gwsr": szGwsr = htFeedback[szKey].ToString(); break;
                             case "process_date": szProcessDate = htFeedback[szKey].ToString(); break;
                             case "auth_code": szAuthCode = htFeedback[szKey].ToString(); break;
                             case "amount": szAmount = htFeedback[szKey].ToString(); break;
                             case "stage": szStage = htFeedback[szKey].ToString(); break;
                             case "stast": szStast = htFeedback[szKey].ToString(); break;
                             case "staed": szStaed = htFeedback[szKey].ToString(); break;
                             case "eci": szECI = htFeedback[szKey].ToString(); break;
                             case "card4no": szCard4No = htFeedback[szKey].ToString(); break;
                             case "card6no": szCard6No = htFeedback[szKey].ToString(); break;
                             case "red_dan": szRedDan = htFeedback[szKey].ToString(); break;
                             case "red_de_amt": szRedDeAmt = htFeedback[szKey].ToString(); break;
                             case "red_ok_amt": szRedOkAmt = htFeedback[szKey].ToString(); break;
                             case "red_yet": szRedYet = htFeedback[szKey].ToString(); break;
                             case "PeriodType": szPeriodType = htFeedback[szKey].ToString(); break;
                             case "Frequency": szFrequency = htFeedback[szKey].ToString(); break;
                             case "ExecTimes": szExecTimes = htFeedback[szKey].ToString(); break;
                             case "PeriodAmount": szPeriodAmount = htFeedback[szKey].ToString(); break;
                             case "TotalSuccessTimes": szTotalSuccessTimes = htFeedback[szKey].ToString(); break;
                             case "TotalSuccessAmount": szTotalSuccessAmount = htFeedback[szKey].ToString(); break;
                             default: break;
                         }
                     }
                     // 其他資料處理。
                     ......
                 }
             }
             catch (Exception ex)
             {
                 // 例外錯誤處理。
                 enErrors.Add(ex.Message);
             }
             finally
             {
                 // 顯示錯誤訊息。
                 if (enErrors.Count() &gt; 0)
                     ScriptManager.RegisterStartupScript(this, typeof(Page), "_MESSAGE", String.Format("alert(\"{0}\");", String.Join("\\r\\n", enErrors)), true);
             }
             </code>
             </example>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOne.QueryPeriodCreditCardTradeInfo(AllPay.Payment.Integration.PeriodCreditCardTradeInfo@)">
             <summary>
             信用卡定期定額訂單查詢
             </summary>
             <param name="feedback">回傳的參數資料</param>
             <returns>錯誤訊息的集合字串。</returns>
             <remarks>
             該方法會以 Server POST 或 Http SOAP(Web Service) 的方式送出參數至 AllInOne.ServiceURL 位址，
             網路需申請 ACL(Access Control List) 才能正常請求訂單資料的查詢。
             </remarks>
             <example>
             <code>
             /*
              *  查詢訂單的範例程式碼。
              */
             List&lt;string&gt; enErrors = new List&lt;string&gt;();
             PeriodCreditCardTradeInfo oFeedback = null;
            
             try
             {
                 using (AllInOne oPayment = new AllInOne())
                 {
                     /* 服務參數 */
                     oPayment.ServiceMethod = HttpMethod.ServerPOST; // 或使用 HttpMethod.HttpSOAP;
                     oPayment.ServiceURL = "&lt;&lt;AllPay Service URL&gt;&gt;";
                     oPayment.HashKey = "&lt;&lt;Hash Key&gt;&gt;";
                     oPayment.HashIV = "&lt;&lt;Hash IV&gt;&gt;";
                     oPayment.MerchantID = "&lt;&lt;Merchant ID&gt;&gt;";
                     /* 基本參數 */
                     oPayment.Query.MerchantTradeNo = "&lt;&lt;Merchant Trade No&gt;&gt;";
                     /* 查詢訂單 */
                     enErrors.AddRange(oPayment.QueryPeriodCreditCardTradeInfo(ref oFeedback));
                 }
                 // 取回所有資料
                 if (enErrors.Count() == 0)
                 {
                     /* 查詢後的回傳的基本參數 */
                     string szMerchantID = oFeedback.MerchantID;
                     string szMerchantTradeNo = oFeedback.MerchantTradeNo;
                     string szTradeNo = oFeedback.TradeNo;
                     int nRtnCode = oFeedback.RtnCode;
                     string szPeriodType = oFeedback.PeriodType;
                     int nFrequency = oFeedback.Frequency;
                     int nExecTimes = oFeedback.ExecTimes;
                     int nPeriodAmount = oFeedback.PeriodAmount;
                     int nAmount = oFeedback.amount;
                     long nGwsr = oFeedback.gwsr;
                     string szProcessDate = oFeedback.process_date;
                     string szAuthCode = oFeedback.auth_code;
                     string szCard4No = oFeedback.card4no;
                     string szCard6No = oFeedback.card6no;
                     int nTotalSuccessTimes = oFeedback.TotalSuccessTimes;
                     int nTotalSuccessAmount = oFeedback.TotalSuccessAmount;
                     // 取得明細資料
                     foreach (PeriodCreditCardTradeInfoLog oLog in oFeedback.ExecLog)
                     {
                         /* 使用 Credit 交易時回傳的參數 */
                         int nLogRtnCode = oLog.RtnCode;
                         int nLogAmount = oLog.amount;
                         long nLogGwsr = oLog.gwsr;
                         string szLogProcessDate = oLog.process_date;
                         string szLogAuthCode = oLog.auth_code;
                     }
                     // 其他資料處理。
                     ………
                 }
             }
             catch (Exception ex)
             {
                 // 例外錯誤處理。
                 enErrors.Add(ex.Message);
             }
             finally
             {
                 // 顯示錯誤訊息。
                 if (enErrors.Count() &gt; 0)
                     ScriptManager.RegisterStartupScript(this, typeof(Page), "_MESSAGE", String.Format("alert(\"{0}\");", String.Join("\\r\\n", enErrors)), true);
             }
             </code>
             </example>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOne.DoAction(System.Collections.Hashtable@)">
             <summary>
             信用卡關帳/退刷/取消/放棄。
             </summary>
             <param name="feedback">回傳的參數資料。</param>
             <returns>錯誤訊息的集合字串。</returns>
             <remarks>
             該方法會以 Server POST 的方式送出參數至 AllInOne.ServiceURL 位址，
             網路需申請 ACL(Access Control List) 才能正常請求訂單資料的信用卡關帳/退刷/取消/放棄。
             </remarks>
             <example>
             <code>
             /*
              *  信用卡關帳/退刷/取消/放棄的範例程式碼。
              */
             List&lt;string&gt; enErrors = new List&lt;string&gt;();
             Hashtable htFeedback = null;
            
             try
             {
                 using (AllInOne oPayment = new AllInOne())
                 {
                     /* 服務參數 */
                     oPayment.ServiceMethod = HttpMethod.ServerPOST;
                     oPayment.ServiceURL = "&lt;&lt;AllPay Service URL&gt;&gt;";
                     oPayment.HashKey = "&lt;&lt;Hash Key&gt;&gt;";
                     oPayment.HashIV = "&lt;&lt;Hash IV&gt;&gt;";
                     oPayment.MerchantID = "&lt;&lt;Merchant ID&gt;&gt;";
                     /* 基本參數 */
                     oPayment.Action.MerchantTradeNo = "&lt;&lt;Merchant Trade No&gt;&gt;";
                     oPayment.Action.TradeNo = "&lt;&lt;Trade No&gt;&gt;";
                     oPayment.Action.Action = (ActionType)Enum.Parse(typeof(ActionType), "&lt;&lt;Action&gt;&gt;");
                     oPayment.Action.TotalAmount = Decimal.Parse("&lt;&lt;Total Amount&gt;&gt;");
            
                     enErrors.AddRange(oPayment.DoAction(ref htFeedback));
                 }
            
                 if (enErrors.Count() == 0)
                 {
                     /* 執行後的回傳的基本參數 */
                     string szMerchantID = String.Empty;
                     string szMerchantTradeNo = String.Empty;
                     string szTradeNo = String.Empty;
                     string szRtnCode = String.Empty;
                     string szRtnMsg = String.Empty;
                     // 取得資料於畫面
                     foreach (string szKey in htFeedback.Keys)
                     {
                         switch (szKey)
                         {
                             /* 執行後的回傳的基本參數 */
                             case "MerchantID": szMerchantID = this.Request.Form[szKey]; break;
                             case "MerchantTradeNo": szMerchantTradeNo = this.Request.Form[szKey]; break;
                             case "TradeNo": szTradeNo = this.Request.Form[szKey]; break;
                             case "RtnCode": szRtnCode = this.Request.Form[szKey]; break;
                             case "RtnMsg": szRtnMsg = this.Request.Form[szKey]; break;
                             default: break;
                         }
                     }
                     // 其他資料處理。
                     ......
                 }
             }
             catch (Exception ex)
             {
                 // 例外錯誤處理。
                 enErrors.Add(ex.Message);
             }
             finally
             {
                 // 顯示錯誤訊息。
                 if (enErrors.Count() &gt; 0)
                     ScriptManager.RegisterStartupScript(this, typeof(Page), "_MESSAGE", String.Format("alert(\"{0}\");", String.Join("\\r\\n", enErrors)), true);
             }
             </code>
             </example>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOne.AioChargeback(System.Collections.Hashtable@)">
             <summary>
             廠商通知退款。
             </summary>
             <param name="feedback">回傳的參數資料。</param>
             <returns>錯誤訊息的集合字串。</returns>
             <remarks>
             該方法會以 Server POST 的方式送出參數至 AllInOne.ServiceURL 位址，
             網路需申請 ACL(Access Control List) 才能正常請求訂單資料的通知退款。
             </remarks>
             <example>
             <code>
             /*
              *  廠商通知退款的範例程式碼。
              */
             List&lt;string&gt; enErrors = new List&lt;string&gt;();
             Hashtable htFeedback = null;
            
             try
             {
                 using (AllInOne oPayment = new AllInOne())
                 {
                     /* 服務參數 */
                     oPayment.ServiceMethod = HttpMethod.ServerPOST;
                     oPayment.ServiceURL = "&lt;&lt;AllPay Service URL&gt;&gt;";
                     oPayment.HashKey = "&lt;&lt;Hash Key&gt;&gt;";
                     oPayment.HashIV = "&lt;&lt;Hash IV&gt;&gt;";
                     oPayment.MerchantID = "&lt;&lt;Merchant ID&gt;&gt;";
                     /* 基本參數 */
                     oPayment.ChargeBack.MerchantTradeNo = "&lt;&lt;Merchant Trade No&gt;&gt;";
                     oPayment.ChargeBack.TradeNo = "&lt;&lt;Trade No&gt;&gt;";
                     oPayment.ChargeBack.Remark = "&lt;&lt;Remark&gt;&gt;"; ;
                     oPayment.ChargeBack.ChargeBackTotalAmount = Decimal.Parse("&lt;&lt;Charge Back Total Amount&gt;&gt;");
            
                     enErrors.AddRange(oPayment.DoAction(ref htFeedback));
                 }
            
                 if (enErrors.Count() == 0)
                 {
                     // 其他資料處理。
                     ......
                 }
             }
             catch (Exception ex)
             {
                 // 例外錯誤處理。
                 enErrors.Add(ex.Message);
             }
             finally
             {
                 // 顯示錯誤訊息。
                 if (enErrors.Count() &gt; 0)
                     ScriptManager.RegisterStartupScript(this, typeof(Page), "_MESSAGE", String.Format("alert(\"{0}\");", String.Join("\\r\\n", enErrors)), true);
             }
             </code>
             </example>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOne.Capture(System.Collections.Hashtable@)">
            <summary>
            廠商確認撥款/退款。
            </summary>
            <param name="feedback">回傳的參數資料。</param>
            <returns>錯誤訊息的集合字串。</returns>
            <remarks>
            該方法會以 Server POST 的方式送出參數至 AllInOne.ServiceURL 位址，
            網路需申請 ACL(Access Control List) 才能正常請求訂單資料的撥款/退款。
            </remarks>
            <example>
            <code>
            </code>
            </example>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOne.TradeNoAio(System.String)">
            <summary>
            廠商下載對帳檔。
            </summary>
            <param name="filepath">對帳檔要儲存的路徑(含檔名)。</param>
            <returns>錯誤訊息的集合字串。</returns>
            <remarks>
            該方法會以 Server POST 的方式送出參數至 AllInOne.ServiceURL 位址，
            網路需申請 ACL(Access Control List) 才能正常下載訂單資料的對帳檔。
            </remarks>
            <example>
            <code>
            </code>
            </example>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOne.BuildCheckMacValue(System.String)">
            <summary>
            產生檢查碼。
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOne.CompareCheckMacValue(System.String,System.String)">
            <summary>
            比對驗證檢查碼。
            </summary>
            <param name="parameters"></param>
            <param name="checkMacValue"></param>
            <returns></returns>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOne.ClearPageControls">
            <summary>
            清除畫面上所有的控制項。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOne.BuildParamenter(System.String,System.Object)">
            <summary>
            產生參數字串。
            </summary>
            <param name="id"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOne.RenderControlAndParamenter(System.String,System.Object)">
            <summary>
            繪製控制項並產生參數字串。
            </summary>
            <param name="id"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOne.RenderControlAndParamenter(System.Collections.Hashtable)">
            <summary>
            繪製控制項並產生參數字串。
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOne.ServerPost(System.String)">
            <summary>
            伺服器端傳送參數請求資料。
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOne.ServerPost(System.String,System.Text.Encoding)">
            <summary>
            伺服器端傳送參數請求資料。
            </summary>
            <param name="parameters"></param>
            <param name="receviceEncoding"></param>
            <returns></returns>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInOne.Dispose">
            <summary>
            執行與釋放 (Free)、釋放 (Release) 或重設 Unmanaged 資源相關聯之應用程式定義的工作。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOne.CurrentPage">
            <summary>
            取得或設定目前頁面。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOne.CurrentHead">
            <summary>
            取得或設定目前表頭。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOne.CurrentForm">
            <summary>
            取得或設定目前表單。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInOne.CurrentRequest">
            <summary>
            取得或設定目前 HttpRequest 物件。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.TheWordType">
            <summary>
            字軌類型。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.TheWordType.None">
            <summary>
            無(當 InvoiceMark=No 時，為該值)。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.TheWordType.Three">
            <summary>
            一般三聯式。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.TheWordType.Two">
            <summary>
            一般二聯式。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.TheWordType.TwoPos">
            <summary>
            二聯式收銀機。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.TheWordType.Special">
            <summary>
            特種稅額。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.TheWordType.Computer">
            <summary>
            電子計算機。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.TheWordType.ThreePos">
            <summary>
            三聯式收銀機。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.ExtraPaymentInfo">
            <summary>
            額外付款資訊。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.ExtraPaymentInfo.Yes">
            <summary>
            需要額外付款資訊。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.ExtraPaymentInfo.No">
            <summary>
            不需要額外付款資訊。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.MD5Encoder.Crypto">
            <summary>
            雜湊加密演算法物件。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.InvoiceVehicleType">
            <summary>
            電子發票載具類型。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.InvoiceVehicleType.None">
            <summary>
            無。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.InvoiceVehicleType.Member">
            <summary>
            歐付寶會員。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.InvoiceVehicleType.NaturalPersonEvidence">
            <summary>
            自然人憑證。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.InvoiceVehicleType.PhoneBarcode">
            <summary>
            手機條碼。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.TaxationType">
            <summary>
            課稅類型。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.TaxationType.None">
            <summary>
            無(當 InvoiceMark=No 時，為該值)。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.TaxationType.Taxable">
            <summary>
            應稅。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.TaxationType.ZeroTaxRate">
            <summary>
            零稅率。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.TaxationType.DutyFree">
            <summary>
            免稅。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.TaxationType.MixedTaxable">
            <summary>
            混合應稅。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.AllocateState">
            <summary>
            撥款狀態。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.AllocateState.ALL">
            <summary>
            全部。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.AllocateState.NoAppropriations">
            <summary>
            未撥款。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.AllocateState.Appropriations">
            <summary>
            已撥款。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.ActionType">
            <summary>
            信用卡訂單處理動作。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.ActionType.C">
            <summary>
            關帳。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.ActionType.R">
            <summary>
            退刷。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.ActionType.E">
            <summary>
            取消。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.ActionType.N">
            <summary>
            放棄。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.EqualsByPaymentMethodAttribute">
            <summary>
            依據付款方式檢核比較欄位字串是否相符於付款方式的類別。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.EqualsByPaymentMethodAttribute.#ctor">
            <summary>
            依據付款方式檢核比較欄位字串是否相符於付款方式的類別建構式。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.EqualsByPaymentMethodAttribute.IsValid(System.Object)">
            <summary>
            是否檢核通過。
            </summary>
            <param name="value">要檢核的物件類別。</param>
            <returns>驗證成功為 True 否則為 False。</returns>
        </member>
        <member name="T:AllPay.Payment.Integration.PaymentMethod">
            <summary>
            付款方式。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethod.ALL">
            <summary>
            不指定付款方式。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethod.Credit">
            <summary>
            信用卡付費。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethod.WebATM">
            <summary>
            網路 ATM。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethod.ATM">
            <summary>
            自動櫃員機。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethod.CVS">
            <summary>
            超商代碼。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethod.BARCODE">
            <summary>
            超商條碼。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethod.Alipay">
            <summary>
            支付寶。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethod.Tenpay">
            <summary>
            財付通。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethod.TopUpUsed">
            <summary>
            儲值消費。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.PaymentMethod.APPBARCODE">
            <summary>
            全家立即儲。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.UseRedeemFlag">
            <summary>
            是否可以使用購物金/紅包折抵。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.UseRedeemFlag.Yes">
            <summary>
            使用折抵。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.UseRedeemFlag.No">
            <summary>
            不使用折抵。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.AllInEscrow">
            <summary>
            歐付寶履約保證介接模組。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInEscrow.#ctor">
            <summary>
            履約保證介接的建構式。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInEscrow.CheckOut">
             <summary>
             訂單產生(HttpPOST, 不支援 Ajax 非同步)。
             </summary>
             <returns>錯誤訊息的集合字串。</returns>
             <remarks>
             該方法自動產生 Http POST 頁面，將參數送至 AllInEscrow.ServiceURL 位址，
             需於 Web 站台或 Web 專案中撰寫以下程式碼才能正常送出訂單資料。
             </remarks>
             <example>
             <code>
             /*
              *  產生訂單的範例程式碼。
              */
             List&lt;string&gt; enErrors = null;
            
             try
             {
                 using (AllInEscrow oPayment = new AllInEscrow())
                 {
                     /* 服務參數 */
                     oPayment.ServiceMethod = HttpMethod.HttpPOST;
                     oPayment.ServiceURL = "&lt;&lt;AllPay Service URL&gt;&gt;";
                     oPayment.HashKey = "&lt;&lt;Hash Key&gt;&gt;";
                     oPayment.HashIV = "&lt;&lt;Hash IV&gt;&gt;";
                     oPayment.MerchantID = "&lt;&lt;Merchant ID&gt;&gt;";
                     /* 基本參數 */
                     oPayment.Send.ReturnURL = "&lt;&lt;Return URL&gt;&gt;";
                     oPayment.Send.ClientBackURL = "&lt;&lt;Client Back URL&gt;&gt;";
            
                     oPayment.Send.MerchantTradeNo = "&lt;&lt;Merchant Trade No&gt;&gt;";
                     oPayment.Send.MerchantTradeDate = DateTime.Parse("&lt;&lt;Merchant Trade Date&gt;&gt;");
                     oPayment.Send.TotalAmount = Decimal.Parse("&lt;&lt;Total Amount&gt;&gt;");
                     oPayment.Send.TradeDesc = "&lt;&lt;Trade Desc&gt;&gt;";
                     oPayment.Send.Currency = "&lt;&lt;Currency&gt;&gt;";
                     oPayment.Send.EncodeChartset = "&lt;&lt;Encode Chartset&gt;&gt;";
                     oPayment.Send.UseAllpayAddress = "&lt;&lt;Use Allpay Address&gt;&gt;";
                     oPayment.Send.CreditInstallment = Int32.Parse("&lt;&lt;Credit Installment&gt;&gt;");
                     oPayment.Send.InstallmentAmount = Decimal.Parse("&lt;&lt;Installment Amount&gt;&gt;");
                     oPayment.Send.Redeem = "&lt;&lt;Redeem&gt;&gt;";
                     oPayment.Send.ShippingDate = "&lt;&lt;Shipping Date&gt;&gt;";
                     oPayment.Send.ConsiderHour = Int32.Parse("&lt;&lt;Consider Hour&gt;&gt;");
                     oPayment.Send.Remark = "&lt;&lt;Remark&gt;&gt;";
                     // 加入選購商品資料。
                     oPayment.Send.Items.Add(new Item() { Name = "&lt;&lt;Product Name&gt;&gt;", Price = Decimal.Parse("&lt;&lt;Unit Price&gt;&gt;"), Currency = "&lt;&lt;Currency&gt;&gt;", Quantity = Int32.Parse("&lt;&lt;Quantity&gt;&gt;"), URL = "&lt;&lt;Product Detail URL&gt;&gt;" });
                     oPayment.Send.Items.Add(new Item() { Name = "&lt;&lt;Product Name&gt;&gt;", Price = Decimal.Parse("&lt;&lt;Unit Price&gt;&gt;"), Currency = "&lt;&lt;Currency&gt;&gt;", Quantity = Int32.Parse("&lt;&lt;Quantity&gt;&gt;"), URL = "&lt;&lt;Product Detail URL&gt;&gt;" });
                     oPayment.Send.Items.Add(new Item() { Name = "&lt;&lt;Product Name&gt;&gt;", Price = Decimal.Parse("&lt;&lt;Unit Price&gt;&gt;"), Currency = "&lt;&lt;Currency&gt;&gt;", Quantity = Int32.Parse("&lt;&lt;Quantity&gt;&gt;"), URL = "&lt;&lt;Product Detail URL&gt;&gt;" });
            
                     enErrors.AddRange(oPayment.CheckOut());
                 }
             }
             catch (Exception ex)
             {
                 // 例外錯誤處理。
                 enErrors.Add(ex.Message);
             }
             finally
             {
                 // 顯示錯誤訊息。
                 if (enErrors.Count() &gt; 0)
                     ScriptManager.RegisterStartupScript(this, typeof(Page), "_MESSAGE", String.Format("alert(\"{0}\");", String.Join("\\r\\n", enErrors)), true);
             }
             </code>
             </example>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInEscrow.CheckOut(System.String)">
             <summary>
             訂單產生(HttpPOST, 不支援 Ajax 非同步)。
             </summary>
             <param name="target">目標視窗</param>
             <returns>錯誤訊息的集合字串。</returns>
             <remarks>
             該方法自動產生 Http POST 頁面，將參數送至 AllInEscrow.ServiceURL 位址，
             需於 Web 站台或 Web 專案中撰寫以下程式碼才能正常送出訂單資料。
             </remarks>
             <example>
             <code>
             /*
              *  產生訂單的範例程式碼。
              */
             List&lt;string&gt; enErrors = null;
            
             try
             {
                 using (AllInEscrow oPayment = new AllInEscrow())
                 {
                     /* 服務參數 */
                     oPayment.ServiceMethod = HttpMethod.HttpPOST;
                     oPayment.ServiceURL = "&lt;&lt;AllPay Service URL&gt;&gt;";
                     oPayment.HashKey = "&lt;&lt;Hash Key&gt;&gt;";
                     oPayment.HashIV = "&lt;&lt;Hash IV&gt;&gt;";
                     oPayment.MerchantID = "&lt;&lt;Merchant ID&gt;&gt;";
                     /* 基本參數 */
                     oPayment.Send.ReturnURL = "&lt;&lt;Return URL&gt;&gt;";
                     oPayment.Send.ClientBackURL = "&lt;&lt;Client Back URL&gt;&gt;";
            
                     oPayment.Send.MerchantTradeNo = "&lt;&lt;Merchant Trade No&gt;&gt;";
                     oPayment.Send.MerchantTradeDate = DateTime.Parse("&lt;&lt;Merchant Trade Date&gt;&gt;");
                     oPayment.Send.TotalAmount = Decimal.Parse("&lt;&lt;Total Amount&gt;&gt;");
                     oPayment.Send.TradeDesc = "&lt;&lt;Trade Desc&gt;&gt;";
                     oPayment.Send.Currency = "&lt;&lt;Currency&gt;&gt;";
                     oPayment.Send.EncodeChartset = "&lt;&lt;Encode Chartset&gt;&gt;";
                     oPayment.Send.UseAllpayAddress = "&lt;&lt;Use Allpay Address&gt;&gt;";
                     oPayment.Send.CreditInstallment = Int32.Parse("&lt;&lt;Credit Installment&gt;&gt;");
                     oPayment.Send.InstallmentAmount = Decimal.Parse("&lt;&lt;Installment Amount&gt;&gt;");
                     oPayment.Send.Redeem = "&lt;&lt;Redeem&gt;&gt;";
                     oPayment.Send.ShippingDate = "&lt;&lt;Shipping Date&gt;&gt;";
                     oPayment.Send.ConsiderHour = Int32.Parse("&lt;&lt;Consider Hour&gt;&gt;");
                     oPayment.Send.Remark = "&lt;&lt;Remark&gt;&gt;";
                     // 加入選購商品資料。
                     oPayment.Send.Items.Add(new Item() { Name = "&lt;&lt;Product Name&gt;&gt;", Price = Decimal.Parse("&lt;&lt;Unit Price&gt;&gt;"), Currency = "&lt;&lt;Currency&gt;&gt;", Quantity = Int32.Parse("&lt;&lt;Quantity&gt;&gt;"), URL = "&lt;&lt;Product Detail URL&gt;&gt;" });
                     oPayment.Send.Items.Add(new Item() { Name = "&lt;&lt;Product Name&gt;&gt;", Price = Decimal.Parse("&lt;&lt;Unit Price&gt;&gt;"), Currency = "&lt;&lt;Currency&gt;&gt;", Quantity = Int32.Parse("&lt;&lt;Quantity&gt;&gt;"), URL = "&lt;&lt;Product Detail URL&gt;&gt;" });
                     oPayment.Send.Items.Add(new Item() { Name = "&lt;&lt;Product Name&gt;&gt;", Price = Decimal.Parse("&lt;&lt;Unit Price&gt;&gt;"), Currency = "&lt;&lt;Currency&gt;&gt;", Quantity = Int32.Parse("&lt;&lt;Quantity&gt;&gt;"), URL = "&lt;&lt;Product Detail URL&gt;&gt;" });
            
                     enErrors.AddRange(oPayment.CheckOut("newForm"));
                 }
             }
             catch (Exception ex)
             {
                 // 例外錯誤處理。
                 enErrors.Add(ex.Message);
             }
             finally
             {
                 // 顯示錯誤訊息。
                 if (enErrors.Count() &gt; 0)
                     ScriptManager.RegisterStartupScript(this, typeof(Page), "_MESSAGE", String.Format("alert(\"{0}\");", String.Join("\\r\\n", enErrors)), true);
             }
             </code>
             </example>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInEscrow.CheckOutFeedback(System.Collections.Hashtable@)">
             <summary>
             取回訂單產生結果。
             </summary>
             <param name="feedback">回傳的參數資料。</param>
             <returns>錯誤訊息的集合字串。</returns>
             <remarks>
             該方法對應到產生訂單方法中 AllInEscrow.Send.ReturnURL 的位址，
             需於 Web 站台或 Web 專案中指定的位址(頁面)撰寫以下程式碼才能正常取回處理結果。
             </remarks>
             <example>
             <code>
             /*
              *  接收訂單資料產生完成的範例程式碼。
              */
             List&lt;string&gt; enErrors = new List&lt;string&gt;();
             Hashtable htFeedback = null;
            
             try
             {
                 using (AllInEscrow oPayment = new AllInEscrow())
                 {
                     oPayment.HashKey = "&lt;&lt;Hash Key&gt;&gt;";
                     oPayment.HashIV = "&lt;&lt;Hash IV&gt;&gt;";
                     /* 取回付款結果 */
                     enErrors.AddRange(oPayment.CheckOutFeedback(ref htFeedback));
                 }
                 // 取回所有資料
                 if (enErrors.Count() == 0)
                 {
                     /* 支付後的回傳的基本參數 */
                     string szMerchantID = String.Empty;
                     string szMerchantTradeNo = String.Empty;
                     string szRtnCode = String.Empty;
                     string szRtnMsg = String.Empty;
                     string szTradeNo = String.Empty;
                     string szTradeAmt = String.Empty;
                     string szPaymentDate = String.Empty;
                     string szPaymentType = String.Empty;
                     string szPaymentTypeChargeFee = String.Empty;
                     string szTradeDate = String.Empty;
                     string szUserAddress = String.Empty; // Only for Alipay
                     string szSimulatePaid = String.Empty;
                     // 取得資料於畫面
                     foreach (string szKey in htFeedback.Keys)
                     {
                         switch (szKey)
                         {
                             /* 支付後的回傳的基本參數 */
                             case "MerchantID": szMerchantID = this.Request.Form[szKey]; break;
                             case "MerchantTradeNo": szMerchantTradeNo = this.Request.Form[szKey]; break;
                             case "PaymentDate": szPaymentDate = this.Request.Form[szKey]; break;
                             case "PaymentType": szPaymentType = this.Request.Form[szKey]; break;
                             case "PaymentTypeChargeFee": szPaymentTypeChargeFee = this.Request.Form[szKey]; break;
                             case "RtnCode": szRtnCode = this.Request.Form[szKey]; break;
                             case "RtnMsg": szRtnMsg = this.Request.Form[szKey]; break;
                             case "SimulatePaid": szSimulatePaid = this.Request.Form[szKey]; break;
                             case "TradeAmt": szTradeAmt = this.Request.Form[szKey]; break;
                             case "TradeDate": szTradeDate = this.Request.Form[szKey]; break;
                             case "TradeNo": szTradeNo = this.Request.Form[szKey]; break;
                             case "UserAddress": szUserAddress = this.Request.Form[szKey]; break;
                             default: break;
                         }
                     }
                     // 其他資料處理。
                     ......
                 }
             }
             catch (Exception ex)
             {
                 enErrors.Add(ex.Message);
             }
             finally
             {
                 this.Response.Clear();
                 // 回覆成功訊息。
                 if (enErrors.Count() == 0)
                     this.Response.Write("1|OK");
                 // 回覆錯誤訊息。
                 else
                     this.Response.Write(String.Format("0|{0}", String.Join("\\r\\n", enErrors)));
                 this.Response.Flush();
                 this.Response.End();
             }
             </code>
             </example>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInEscrow.DeliveryNotify(System.Collections.Hashtable@)">
             <summary>
             出貨通知(ServerPOST)。
             </summary>
             <param name="feedback">回傳的參數資料。</param>
             <returns>錯誤訊息的集合字串。</returns>
             <remarks>
             該方法會以 Server POST 的方式送出參數至 AllInEscrow.ServiceURL 位址，
             網路需申請 ACL(Access Control List) 才能正常送出出貨通知資料的給 AllPay。
             </remarks>
             <example>
             <code>
             /*
              *  出貨通知的範例程式碼。
              */
             List&lt;string&gt; enErrors = new List&lt;string&gt;();
             Hashtable htFeedback = null;
            
             try
             {
                 using (AllInEscrow oPayment = new AllInEscrow())
                 {
                     /* 服務參數 */
                     oPayment.ServiceMethod = HttpMethod.ServerPOST;
                     oPayment.ServiceURL = "&lt;&lt;AllPay Service URL&gt;&gt;";
                     oPayment.HashKey = "&lt;&lt;Hash Key&gt;&gt;";
                     oPayment.HashIV = "&lt;&lt;Hash IV&gt;&gt;";
                     oPayment.MerchantID = "&lt;&lt;Merchant ID&gt;&gt;";
                     /* 基本參數 */
                     oPayment.Delivery.MerchantTradeNo = "&lt;&lt;Merchant Trade No&gt;&gt;";
                     oPayment.Delivery.TradeNo = "&lt;&lt;Trade No&gt;&gt;";
                     oPayment.Delivery.ShippingState = (ShippingState)Enum.Parse(typeof(ShippingState), "&lt;&lt;Shipping State&gt;&gt;");
                     oPayment.Delivery.ShippingDate = DateTime.Parse("&lt;&lt;Shipping Date&gt;&gt;");
                     oPayment.Delivery.EncodeChartset = "&lt;&lt;Encode Chartset&gt;&gt;";
                     oPayment.Delivery.Remark = "&lt;&lt;Remark&gt;&gt;";
            
                     enErrors.AddRange(oPayment.DeliveryNotify(ref htFeedback));
                 }
            
                 if (enErrors.Count() == 0)
                 {
                     // 其他資料處理。
                     ......
                 }
             }
             catch (Exception ex)
             {
                 // 例外錯誤處理。
                 enErrors.Add(ex.Message);
             }
             finally
             {
                 // 顯示錯誤訊息。
                 if (enErrors.Count() > 0)
                     ScriptManager.RegisterStartupScript(this, typeof(Page), "_MESSAGE", String.Format("alert(\"{0}\");", String.Join("\\r\\n", enErrors)), true);
             }
             </code>
             </example>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInEscrow.OrderChangeFeedback(System.Collections.Hashtable@)">
             <summary>
             接收 AllPay 通知商品異常/取消訂單資料。
             </summary>
             <param name="feedback">回傳的參數資料。</param>
             <returns>錯誤訊息的集合字串。</returns>
             <remarks>
             該方法使用前，請於 AllPay 廠商後台設定位址(後台帳號管理 > 廠商基本資料查詢)，
             AllPay 才能將商品異常/取消訂單的通知送到指定的位址；
             需於 Web 站台或 Web 專案中指定的位址(頁面)撰寫以下程式碼才能正常收到通知結果。
             </remarks>
             <example>
             <code>
             /*
              *  接收商品異常/取消訂單的範例程式碼。
              */
             List&lt;string&gt; enErrors = new List&lt;string&gt;();
             Hashtable htFeedback = null;
            
             try
             {
                 using (AllInEscrow oPayment = new AllInEscrow())
                 {
                     oPayment.HashKey = "&lt;&lt;Hash Key&gt;&gt;";
                     oPayment.HashIV = "&lt;&lt;Hash IV&gt;&gt;";
                     /* 取回付款結果 */
                     enErrors.AddRange(oPayment.CheckOutFeedback(ref htFeedback));
                 }
                 // 取回所有資料
                 if (enErrors.Count() == 0)
                 {
                     /* 收到通知後取回的基本參數 */
                     string szMerchantID = String.Empty;
                     string szMerchantTradeNo = String.Empty;
                     string szTradeNo = String.Empty;
                     string szInfoType = String.Empty;
                     string szReason = String.Empty;
                     string szRemark = String.Empty;
                     // 取得資料於畫面
                     foreach (string szKey in htFeedback.Keys)
                     {
                         switch (szKey)
                         {
                             /* 收到通知後取回的基本參數 */
                             case "MerchantID": szMerchantID = this.Request.Form[szKey]; break;
                             case "MerchantTradeNo": szMerchantTradeNo = this.Request.Form[szKey]; break;
                             case "InfoType": szInfoType = this.Request.Form[szKey]; break;
                             case "Reason": szReason = this.Request.Form[szKey]; break;
                             case "Remark": szRemark = this.Request.Form[szKey]; break;
                             case "TradeNo": szTradeNo = this.Request.Form[szKey]; break;
                             default: break;
                         }
                     }
                     // 其他資料處理。
                     ......
                 }
             }
             catch (Exception ex)
             {
                 enErrors.Add(ex.Message);
             }
             finally
             {
                 this.Response.Clear();
                 // 回覆成功訊息。
                 if (enErrors.Count() == 0)
                     this.Response.Write("1|OK");
                 // 回覆錯誤訊息。
                 else
                     this.Response.Write(String.Format("0|{0}", String.Join("\\r\\n", enErrors)));
                 this.Response.Flush();
                 this.Response.End();
             }
             </code>
             </example>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInEscrow.OrderChangeNotify(System.Collections.Hashtable@)">
             <summary>
             商品異常/取消訂單處理結果回覆(ServerPOST)。
             </summary>
             <param name="feedback">回傳的參數資料。</param>
             <returns>錯誤訊息的集合字串。</returns>
             <remarks>
             該方法會以 Server POST 的方式送出參數至 AllInEscrow.ServiceURL 位址，
             網路需申請 ACL(Access Control List) 才能正常送出商品異常/取消訂單處理結果資料給 AllPay。
             </remarks>
             <example>
             <code>
             /*
              * 商品異常/取消訂單處理結果回覆的範例程式碼。
              */
             List&lt;string&gt; enErrors = new List&lt;string&gt;();
             Hashtable htFeedback = null;
            
             try
             {
                 using (AllInEscrow oPayment = new AllInEscrow())
                 {
                     /* 服務參數 */
                     oPayment.ServiceMethod = HttpMethod.ServerPOST;
                     oPayment.ServiceURL = "&lt;&lt;AllPay Service URL&gt;&gt;";
                     oPayment.HashKey = "&lt;&lt;Hash Key&gt;&gt;";
                     oPayment.HashIV = "&lt;&lt;Hash IV&gt;&gt;";
                     oPayment.MerchantID = "&lt;&lt;Merchant ID&gt;&gt;";
                     /* 基本參數 */
                     oPayment.Change.MerchantTradeNo = "&lt;&lt;Merchant Trade No&gt;&gt;";
                     oPayment.Change.TradeNo = "&lt;&lt;Trade No&gt;&gt;";
                     oPayment.Change.InfoType = (NotifiedType)Enum.Parse(typeof(NotifiedType), "&lt;&lt;Info Type&gt;&gt;");
                     oPayment.Change.RefundAmount = (String.IsNullOrEmpty("&lt;&lt;Refund Amount&gt;&gt;") ? null : (Decimal?)Decimal.Parse("&lt;&lt;Refund Amount&gt;&gt;"));
                     oPayment.Change.Remark = "&lt;&lt;Remark&gt;&gt;";
            
                     enErrors.AddRange(oPayment.OrderChangeNotify(ref htFeedback));
                 }
            
                 if (enErrors.Count() == 0)
                 {
                     // 其他資料處理。
                     ......
                 }
             }
             catch (Exception ex)
             {
                 enErrors.Add(ex.Message);
             }
             finally
             {
                 if (enErrors.Count() > 0)
                 {
                     ScriptManager.RegisterStartupScript(this, typeof(Page), "_MESSAGE", String.Format("alert(\"{0}\");", String.Join("\\r\\n", enErrors)), true);
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInEscrow.CompletedFeedback(System.Collections.Hashtable@)">
             <summary>
             接收 AllPay 通知訂單履約完成資料
             </summary>
             <param name="feedback">回傳的參數資料。</param>
             <returns>錯誤訊息的集合字串。</returns>
             <remarks>
             該方法使用前，請於 AllPay 廠商後台設定位址(後台帳號管理 > 廠商基本資料查詢)，
             AllPay 才能將訂單履約完成資料的通知送到指定的位址；
             需於 Web 站台或 Web 專案中指定的位址(頁面)撰寫以下程式碼才能正常收到通知結果。
             </remarks>
             <example>
             <code>
             /*
              *  接收訂單履約完成通知資料的範例程式碼。
              */
             List&lt;string&gt; enErrors = new List&lt;string&gt;();
             Hashtable htFeedback = null;
            
             try
             {
                 using (AllInEscrow oPayment = new AllInEscrow())
                 {
                     oPayment.HashKey = "&lt;&lt;Hash Key&gt;&gt;";
                     oPayment.HashIV = "&lt;&lt;Hash IV&gt;&gt;";
                     /* 取回付款結果 */
                     enErrors.AddRange(oPayment.CheckOutFeedback(ref htFeedback));
                 }
                 // 取回所有資料
                 if (enErrors.Count() == 0)
                 {
                     /* 收到通知後取回的基本參數 */
                     string szMerchantID = String.Empty;
                     string szMerchantTradeNo = String.Empty;
                     string szTradeNo = String.Empty;
                     string szTradeStatus = String.Empty;
                     string szTotalAmount = String.Empty;
                     string szReundAmount = String.Empty;
                     string szEscrowCompletedDate = String.Empty;
                     // 取得資料於畫面
                     foreach (string szKey in htFeedback.Keys)
                     {
                         switch (szKey)
                         {
                             /* 收到通知後取回的基本參數 */
                             case "MerchantID": szMerchantID = this.Request.Form[szKey]; break;
                             case "MerchantTradeNo": szMerchantTradeNo = this.Request.Form[szKey]; break;
                             case "TradeStatus": szTradeStatus = this.Request.Form[szKey]; break;
                             case "TotalAmount": szTotalAmount = this.Request.Form[szKey]; break;
                             case "ReundAmount": szReundAmount = this.Request.Form[szKey]; break;
                             case "TradeNo": szTradeNo = this.Request.Form[szKey]; break;
                             case "EscrowCompletedDate": szEscrowCompletedDate = this.Request.Form[szKey]; break;
                             default: break;
                         }
                     }
                     // 其他資料處理。
                     ......
                 }
             }
             catch (Exception ex)
             {
                 enErrors.Add(ex.Message);
             }
             finally
             {
                 this.Response.Clear();
                 // 回覆成功訊息。
                 if (enErrors.Count() == 0)
                     this.Response.Write("1|OK");
                 // 回覆錯誤訊息。
                 else
                     this.Response.Write(String.Format("0|{0}", String.Join("\\r\\n", enErrors)));
                 this.Response.Flush();
                 this.Response.End();
             }
             </code>
             </example>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInEscrow.QueryTradeInfo(System.Collections.Hashtable@)">
             <summary>
             訂單查詢。
             </summary>
             <param name="feedback">回傳的參數資料。</param>
             <returns>錯誤訊息的集合字串。</returns>
             <remarks>
             該方法會以 Server POST 或 Http SOAP(Web Service) 的方式送出參數至 AllInOne.ServiceURL 位址，
             網路需申請 ACL(Access Control List) 才能正常請求訂單資料的查詢。
             </remarks>
             <example>
             <code>
             /*
              *  查詢訂單的範例程式碼。
              */
             List&lt;string&gt; enErrors = new List&lt;string&gt;();
             Hashtable htFeedback = null;
            
             try
             {
                 using (AllInOne oPayment = new AllInOne())
                 {
                     /* 服務參數 */
                     oPayment.ServiceMethod = HttpMethod.ServerPOST; // 或使用 HttpMethod.HttpSOAP;
                     oPayment.ServiceURL = "&lt;&lt;AllPay Service URL&gt;&gt;";
                     oPayment.HashKey = "&lt;&lt;Hash Key&gt;&gt;";
                     oPayment.HashIV = "&lt;&lt;Hash IV&gt;&gt;";
                     oPayment.MerchantID = "&lt;&lt;Merchant ID&gt;&gt;";
                     /* 基本參數 */
                     oPayment.Query.MerchantTradeNo = "&lt;&lt;Merchant Trade No&gt;&gt;";
                     /* 查詢訂單 */
                     enErrors.AddRange(oPayment.QueryTradeInfo(ref htFeedback));
                 }
                 // 取回所有資料
                 if (enErrors.Count() == 0)
                 {
                     /* 查詢後的回傳的基本參數 */
                     string szMerchantID = String.Empty;
                     string szMerchantTradeNo = String.Empty;
                     string szTradeNo = String.Empty;
                     string szTradeAmt = String.Empty;
                     string szPaymentDate = String.Empty;
                     string szPaymentType = String.Empty;
                     string szHandlingCharge = String.Empty;
                     string szPaymentTypeChargeFee = String.Empty;
                     string szTradeDate = String.Empty;
                     string szTradeStatus = String.Empty;
                     string szItemName = String.Empty;
                     string szConsiderHour = String.Empty;
                     string szEscrowCompleted = String.Empty;
                     // 取得資料於畫面
                     foreach (string szKey in htFeedback.Keys)
                     {
                         switch (szKey)
                         {
                             /* 查詢後的回傳的基本參數 */
                             case "MerchantID": szMerchantID = this.Request.Form[szKey]; break;
                             case "MerchantTradeNo": szMerchantTradeNo = this.Request.Form[szKey]; break;
                             case "TradeNo": szTradeNo = this.Request.Form[szKey]; break;
                             case "TradeAmt": szTradeAmt = this.Request.Form[szKey]; break;
                             case "PaymentDate": szPaymentDate = this.Request.Form[szKey]; break;
                             case "PaymentType": szPaymentType = this.Request.Form[szKey]; break;
                             case "HandlingCharge": szHandlingCharge = this.Request.Form[szKey]; break;
                             case "PaymentTypeChargeFee": szPaymentTypeChargeFee = this.Request.Form[szKey]; break;
                             case "TradeDate": szTradeDate = this.Request.Form[szKey]; break;
                             case "TradeStatus": szTradeStatus = this.Request.Form[szKey]; break;
                             case "ItemName": szItemName = this.Request.Form[szKey]; break;
                             case "ConsiderHour": szConsiderHour = this.Request.Form[szKey]; break;
                             case "EscrowCompleted": szEscrowCompleted = this.Request.Form[szKey]; break;
                             default: break;
                         }
                     }
                     // 其他資料處理。
                     ......
                 }
             }
             catch (Exception ex)
             {
                 // 例外錯誤處理。
                 enErrors.Add(ex.Message);
             }
             finally
             {
                 // 顯示錯誤訊息。
                 if (enErrors.Count() &gt; 0)
                     ScriptManager.RegisterStartupScript(this, typeof(Page), "_MESSAGE", String.Format("alert(\"{0}\");", String.Join("\\r\\n", enErrors)), true);
             }
             </code>
             </example>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInEscrow.BuildCheckMacValue(System.String)">
            <summary>
            產生檢查碼。
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInEscrow.CompareCheckMacValue(System.String,System.String)">
            <summary>
            比對驗證檢查碼。
            </summary>
            <param name="parameters"></param>
            <param name="checkMacValue"></param>
            <returns></returns>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInEscrow.ClearPageControls">
            <summary>
            清除畫面上所有的控制項。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInEscrow.BuildParamenter(System.String,System.Object)">
            <summary>
            產生參數字串。
            </summary>
            <param name="id"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInEscrow.RenderControlAndParamenter(System.String,System.Object)">
            <summary>
            繪製控制項並產生參數字串。
            </summary>
            <param name="id"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInEscrow.ServerPost(System.String)">
            <summary>
            伺服器端傳送參數請求資料。
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:AllPay.Payment.Integration.AllInEscrow.Dispose">
            <summary>
            執行與釋放 (Free)、釋放 (Release) 或重設 Unmanaged 資源相關聯之應用程式定義的工作。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInEscrow.CurrentPage">
            <summary>
            取得目前頁面。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.AllInEscrow.CurrentRequest">
            <summary>
            取得或設定目前 HttpRequest 物件。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.ServerValidator">
            <summary>
            伺服器端的 Model 驗證。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.ServerValidator.Validate(System.Object)">
            <summary>
            要驗證的結構描述。
            </summary>
            <param name="source">主要驗證的元件。</param>
            <returns>驗證的訊息內容。</returns>
        </member>
        <member name="M:AllPay.Payment.Integration.ServerValidator.Validate(System.Object,System.Object)">
            <summary>
            要驗證的結構描述。
            </summary>
            <param name="relation">相關要驗證的元件。</param>
            <param name="source">主要驗證的元件。</param>
            <returns>驗證的訊息內容。</returns>
        </member>
        <member name="T:AllPay.Payment.Integration.DonatedInvoice">
            <summary>
            發票捐贈類型。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.DonatedInvoice.None">
            <summary>
            無(當 InvoiceMark=No 時，為該值)。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.DonatedInvoice.Yes">
            <summary>
            捐贈發票。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.DonatedInvoice.No">
            <summary>
            不捐贈發票。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.CustomsClearance">
            <summary>
            報關方式。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.CustomsClearance.None">
            <summary>
            無(當 InvoiceMark=No 且 TaxType 不是零稅率時，為該值)。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.CustomsClearance.CustomsExport">
            <summary>
            經海關出口(當 TaxType 為零稅率時，可設定該值)。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.CustomsClearance.ECACustomsExport">
            <summary>
            非經海關出口(當 TaxType 為零稅率時，可設定該值)。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.DeviceType">
            <summary>
            裝置類型。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.DeviceType.PC">
            <summary>
            桌機版付費頁面。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.DeviceType.Mobile">
            <summary>
            行動裝置版付費頁面。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.ValidatePlatformArgumentsAttribute">
            <summary>
            依據 PlatformID 檢核比較可填寫資料欄位的類別。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.ValidatePlatformArgumentsAttribute.#ctor">
            <summary>
            依據 PlatformID 檢核比較可填寫資料欄位的類別建構式。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.ValidatePlatformArgumentsAttribute.IsValid(System.Object)">
            <summary>
            是否檢核通過。
            </summary>
            <param name="value">要檢核的物件類別。</param>
            <returns>驗證成功為 True 否則為 False。</returns>
        </member>
        <member name="T:AllPay.Payment.Integration.Logger">
            <summary>
            記錄檔處理的靜態類別。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.Logger.LOGGER_FULL_FILENAME">
            <summary>
            記錄檔儲存路徑格式。
            </summary>
        </member>
        <member name="F:AllPay.Payment.Integration.Logger.swLogger">
            <summary>
            處理 IO 資料的物件。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.Logger.#cctor">
            <summary>
            記錄檔處理的靜態類別建構式。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.Logger.Write(System.String)">
            <summary>
            寫入記錄檔。
            </summary>
            <param name="message">要寫入的訊息。</param>
        </member>
        <member name="M:AllPay.Payment.Integration.Logger.WriteLine(System.String)">
            <summary>
            寫入一行記錄檔。
            </summary>
            <param name="message">要寫入的訊息。</param>
        </member>
        <member name="M:AllPay.Payment.Integration.Logger.CreateInstance">
            <summary>
            建立處理 IO 資料的物件實例。
            </summary>
        </member>
        <member name="P:AllPay.Payment.Integration.Logger.FileName">
            <summary>
            取得目前要使用的記錄檔檔名。
            </summary>
        </member>
        <member name="T:AllPay.Payment.Integration.RequiredByCarruerTypeAttribute">
            <summary>
            依據載具類型檢查該欄位是否必填的類別。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.RequiredByCarruerTypeAttribute.#ctor">
            <summary>
            依據載具類型檢查該欄位是否必填的類別建構式。
            </summary>
        </member>
        <member name="M:AllPay.Payment.Integration.RequiredByCarruerTypeAttribute.IsValid(System.Object)">
            <summary>
            是否檢核通過。
            </summary>
            <param name="value">要檢核的物件類別。</param>
            <returns>驗證成功為 True 否則為 False。</returns>
        </member>
    </members>
</doc>
